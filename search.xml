<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[集合框架-Set集合]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-04-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Set.html</url>
      <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="Set："><a href="#Set：" class="headerlink" title="Set："></a>Set：</h2><p>元素是无序的（存入和取出的顺序不一定一致），元素不可以重复。<br>Set集合的功能和Collection是一致的。<br><a id="more"></a></p>
<h3 id="HashSet："><a href="#HashSet：" class="headerlink" title="HashSet："></a>HashSet：</h3><p>底层的数据结构是<code>哈希表</code>。</p>
<h4 id="HashSet是如何保证元素唯一性的呢？"><a href="#HashSet是如何保证元素唯一性的呢？" class="headerlink" title="HashSet是如何保证元素唯一性的呢？"></a>HashSet是如何保证元素唯一性的呢？</h4><p>是通过元素的两个方法，hashCode和equals来完成的。<br>如果元素的hashcode值相同，才会判断equals是否为true；<br>如果元素的hashcode值不同，不会调用equals方法。</p>
<h2 id="gt-注意：对于判断元素是否存在以及删除等操作，HashSet依赖的方法是元素的hashcode和equals方法。"><a href="#gt-注意：对于判断元素是否存在以及删除等操作，HashSet依赖的方法是元素的hashcode和equals方法。" class="headerlink" title="&gt; 注意：对于判断元素是否存在以及删除等操作，HashSet依赖的方法是元素的hashcode和equals方法。"></a>&gt; 注意：对于判断元素是否存在以及删除等操作，HashSet依赖的方法是元素的hashcode和equals方法。</h2><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comhashsey;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		HashSet hs = <span class="keyword">new</span> HashSet();</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"zhangsan"</span>,<span class="number">20</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"wangwu"</span>,<span class="number">21</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"zhangsan"</span>,<span class="number">22</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"wangwu"</span>,<span class="number">25</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"zhangsan"</span>,<span class="number">22</span>));</span><br><span class="line">	</span><br><span class="line">		Iterator it = hs.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Human h = (Human)it.next();</span><br><span class="line">			System.out.println(h.getName()+<span class="string">"::"</span>+h.getAge());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	Human(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//复写Object类中hashCode方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//复写Object类中的equals方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Human))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		Human h = (Human)obj;<span class="comment">//多态类型强制转换</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name.equals(h.name) &amp;&amp; <span class="keyword">this</span>.age == h.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangsan::<span class="number">20</span></span><br><span class="line">wangwu::<span class="number">21</span></span><br><span class="line">zhangsan::<span class="number">22</span></span><br><span class="line">wangwu::<span class="number">25</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-ArrayList练习]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-04-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-ArrayList%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<h1 id="ArrayList练习"><a href="#ArrayList练习" class="headerlink" title="ArrayList练习"></a>ArrayList练习</h1><h2 id="需求1：去除重复元素"><a href="#需求1：去除重复元素" class="headerlink" title="需求1：去除重复元素"></a>需求1：去除重复元素</h2><p>将ArraList中相同的元素去除，只保留单一元素存入一个新的集合类<br><a id="more"></a></p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1、定义一个新的容器用来存放得到的元素<br>2、运用迭代器对容器中的元素进行迭代操作<br>3、在存入元素前，先判定新容器中是否已存在与该元素相同的元素<br>4、如果没有该相同元素，则运用add方法存入该元素<br>5、将以上步骤封装到一个方法中，返回类型为ArrayList，以便调用操作</p>
<h3 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java03"</span>);</span><br><span class="line">		al = singleElement(al);</span><br><span class="line">		System.out.println(al);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span>&#123;</span><br><span class="line">		<span class="comment">//新建一个存放元素的容器</span></span><br><span class="line">		ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//运用迭代器对原容器中的元素进行迭代操作</span></span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="comment">//定义一个对象用来指向迭代到的元素</span></span><br><span class="line">			Object obj = it.next();</span><br><span class="line">			<span class="comment">//判定新容器中是否已存在相同元素，false时存入</span></span><br><span class="line">			<span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">				newAl.add(obj);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> newAl;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[java01, java02, java03]</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="需求2：去除重复对象"><a href="#需求2：去除重复对象" class="headerlink" title="需求2：去除重复对象"></a>需求2：去除重复对象</h2><p>用ArrayList将重复的对象清除，并保留单一对象</p>
<h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>1、创建对象，声明对象的元素参数<br>2、复写Object类的equals方法，以便判定两个对象中的元素是否相同<br>3、新建容器，用来存储对象<br>4、运用Iterator迭代器对容器中的对象进行迭代操作<br>5、判定新容器中的对象是否与将要存入的相同后，取出单一对象存入新容器</p>
<h3 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comarraylisttest;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	Person(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		Person p = (Person)obj;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">30</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">28</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">30</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">28</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">28</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">30</span>));</span><br><span class="line">		al = singleElement(al);</span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			</span><br><span class="line">			Person p = (Person)it.next();</span><br><span class="line">			<span class="comment">/*多态类型强制转换，实际代码为:</span><br><span class="line">			 * Object obj = it.next();</span><br><span class="line">			 * Person p = (Person)obj;</span><br><span class="line">			 */</span></span><br><span class="line">			System.out.println(p.getName()+<span class="string">".."</span>+p.getAge());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span>&#123;</span><br><span class="line">		ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Object obj = it.next();</span><br><span class="line">			<span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">				newAl.add(obj);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> newAl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangsan..<span class="number">30</span></span><br><span class="line">zhangsan..<span class="number">28</span></span><br><span class="line">lisi..<span class="number">30</span></span><br><span class="line">lisi..<span class="number">28</span></span><br></pre></td></tr></table></figure>
<h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><blockquote>
<p>List集合判断元素是否相同，实际上是依据元素的equals方法。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-LinkedList模拟堆栈、队列的数据结构]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-LinkedList%E6%A8%A1%E6%8B%9F%E5%A0%86%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
      <content type="html"><![CDATA[<h1 id="LinkedList-练习"><a href="#LinkedList-练习" class="headerlink" title="LinkedList 练习"></a>LinkedList 练习</h1><ul>
<li>通过封装LinkedList的添加、取出方法来模拟一个堆栈或队列的数据结构</li>
<li>运用LinkedList中的addFirst方法进行数据的依次存入</li>
<li>运用LinkedList中的removeFirst方法进行数据的逆向取出</li>
<li>运用LinkedList中的removeLast方法进行数据的依次取出</li>
<li>运用LinkedList中的isEmpty方法对LinkedList中是否有元素进行判定，以便进行数据的取出动作</li>
</ul>
<a id="more"></a>
<h2 id="用LinkedList方法模拟堆栈的数据结构"><a href="#用LinkedList方法模拟堆栈的数据结构" class="headerlink" title="用LinkedList方法模拟堆栈的数据结构"></a>用LinkedList方法模拟堆栈的数据结构</h2><p>数据先进后出，如同一个杯子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuiZhan</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> LinkedList link;</span><br><span class="line">	DuiZhan()&#123;</span><br><span class="line">		link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		link.addFirst(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">myGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.removeFirst();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//用LinkedList方法演示堆栈</span></span><br><span class="line">		DuiZhan dz = <span class="keyword">new</span> DuiZhan();</span><br><span class="line">		dz.myAdd(<span class="string">"java05"</span>);</span><br><span class="line">		dz.myAdd(<span class="string">"java06"</span>);</span><br><span class="line">		dz.myAdd(<span class="string">"java07"</span>);</span><br><span class="line">		dz.myAdd(<span class="string">"java08"</span>);</span><br><span class="line">		<span class="keyword">while</span>(!dz.isNull())&#123;</span><br><span class="line">			System.out.println(dz.myGet());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java08</span><br><span class="line">java07</span><br><span class="line">java06</span><br><span class="line">java05</span><br></pre></td></tr></table></figure></p>
<h2 id="用LinkedList方法模拟队列的数据结构"><a href="#用LinkedList方法模拟队列的数据结构" class="headerlink" title="用LinkedList方法模拟队列的数据结构"></a>用LinkedList方法模拟队列的数据结构</h2><p>数据先进先出，如同一个管子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuiLie</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> LinkedList link;</span><br><span class="line">	DuiLie()&#123;</span><br><span class="line">		link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		link.addFirst(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">myGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.removeLast();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//用LinkedList方法演示队列</span></span><br><span class="line">		DuiLie dl = <span class="keyword">new</span> DuiZhan();</span><br><span class="line">		dl.myAdd(<span class="string">"java01"</span>);</span><br><span class="line">		dl.myAdd(<span class="string">"java02"</span>);</span><br><span class="line">		dl.myAdd(<span class="string">"java03"</span>);</span><br><span class="line">		dl.myAdd(<span class="string">"java04"</span>);</span><br><span class="line">		<span class="keyword">while</span>(!dl.isNull())&#123;</span><br><span class="line">			System.out.println(dl.myGet());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java01</span><br><span class="line">java02</span><br><span class="line">java03</span><br><span class="line">java04</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-List]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E9%9B%86%E5%90%88%E7%9A%84%E5%85%B1%E6%80%A7%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote>
<p>元素是有序的，并且可以重复；因为该集合体系有索引。</p>
<ul>
<li>ArrayList：底层的数据结构使用的是数组结构；特点：查询速度很快，但是增删稍慢，<code>线程不同步</code>。</li>
<li>LinkedList：底层使用的是链表数据结构；特点：增删速度快，查询稍慢。</li>
<li>Vector：底层是数组数据结构；特点：同ArrayList，但<code>线程同步</code>；被ArrayList替代了。<a id="more"></a>
</li>
</ul>
</blockquote>
<h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><blockquote>
<p>凡是可以操作角标的方法都是该体系特有的方法。</p>
</blockquote>
<ul>
<li><p>增</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(index,element);</span><br><span class="line">addAll(index,Collection);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove(index);</span><br></pre></td></tr></table></figure>
</li>
<li><p>改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(index,element);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get(index);</span><br><span class="line">subList(from,to);</span><br><span class="line">listIterator();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="List集合特有的迭代器，ListIrerator是Iterator的子接口"><a href="#List集合特有的迭代器，ListIrerator是Iterator的子接口" class="headerlink" title="List集合特有的迭代器，ListIrerator是Iterator的子接口"></a>List集合特有的迭代器，ListIrerator是Iterator的子接口</h4><p>在迭代时，不可以通过集合对象的方法操作集合中的元素，因为会发生ConcurrentModificationException异常；所以，在迭代时只能用迭代期的方法操作元素，可是Iterator方法是有限的，只能对元素进行判断、取出、删除的操作；如果需要其他的操作如：添加、修改等，就需要使用其子接口：ListIterator。</p>
<h4 id="演示示例"><a href="#演示示例" class="headerlink" title="演示示例"></a>演示示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methd</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java03"</span>);</span><br><span class="line"></span><br><span class="line">		sop(<span class="string">"原集合："</span>+al);</span><br><span class="line">		<span class="comment">//在指定位置添加元素</span></span><br><span class="line">		al.add(<span class="number">1</span>,<span class="string">"java09"</span>);</span><br><span class="line">		<span class="comment">//删除指定位置的元素</span></span><br><span class="line">		al.remove(<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//修改元素</span></span><br><span class="line">		al.set(<span class="number">2</span>,<span class="string">"java007"</span>);</span><br><span class="line">		<span class="comment">//通过角标获取元素</span></span><br><span class="line">		sop(<span class="string">"get(1):"</span>+al.get(<span class="number">1</span>));</span><br><span class="line">		sop(al);</span><br><span class="line">		<span class="comment">//获取所有元素</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;al.size(); x++)&#123;</span><br><span class="line">			System.out.println(<span class="string">"al("</span>+x+<span class="string">")="</span>+al.get(x));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			sop(<span class="string">"next:"</span>+it.next());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//通过indexOf获取对象的位置</span></span><br><span class="line">		sop(<span class="string">"index = "</span>+al.indexOf(<span class="string">"java02"</span>));</span><br><span class="line">		List sub = al.subList(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">		sop(<span class="string">"sub="</span>+sub);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//演示列表迭代器</span></span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java03"</span>);</span><br><span class="line">		ListIterator li = al.listIterator();</span><br><span class="line">		<span class="keyword">while</span>(li.hasNext())&#123;</span><br><span class="line">			Object obj = li.next();</span><br><span class="line">			<span class="keyword">if</span>(obj.equals(<span class="string">"java02"</span>))</span><br><span class="line">				<span class="comment">//添加元素</span></span><br><span class="line">				li.add(<span class="string">"java008"</span>);</span><br><span class="line">				<span class="comment">//修改元素</span></span><br><span class="line">				li.set(<span class="string">"java006"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*</span><br><span class="line">		//在迭代过程中，删除元素</span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		while(it.hasNext())&#123;</span><br><span class="line">			Object obj = it.next();</span><br><span class="line"></span><br><span class="line">			if(obj.equals("java02"))</span><br><span class="line">				it.remove();//将java02的引用从集合中删除</span><br><span class="line">			sop("obj="+obj);</span><br><span class="line">		&#125;</span><br><span class="line">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul>
<li>枚举就是Vector特有的取出方式，和迭代器很像</li>
<li>因为枚举的名称以及方法的名称都过长，所以被迭代器取代了<h5 id="Vector演示示例"><a href="#Vector演示示例" class="headerlink" title="Vector演示示例"></a>Vector演示示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VectorDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line">	v.add(<span class="string">"java001"</span>);</span><br><span class="line">	v.add(<span class="string">"java002"</span>);</span><br><span class="line">	v.add(<span class="string">"java003"</span>);</span><br><span class="line"></span><br><span class="line">	Enumeration en = v.elements();</span><br><span class="line">	<span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">		System.out.println(en.nextElement());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="LinkedList特有方法"><a href="#LinkedList特有方法" class="headerlink" title="LinkedList特有方法"></a>LinkedList特有方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">添加元素：</span><br><span class="line">addFirst();</span><br><span class="line">addLast();</span><br><span class="line"></span><br><span class="line">获取元素，但不删除元素，如果集合中没有元素，会出现NoSuchElementException：</span><br><span class="line">getFirst();</span><br><span class="line">getLast();</span><br><span class="line"></span><br><span class="line">获取元素，但元素会被删除，如果集合中没有元素，会出现NoSuchElementException：</span><br><span class="line">removeFirst();</span><br><span class="line">removeLast();</span><br><span class="line"></span><br><span class="line">在JDK1.6出现了替代方法：</span><br><span class="line">添加元素</span><br><span class="line">offerFirst();</span><br><span class="line">offerLast();</span><br><span class="line"></span><br><span class="line">获取元素，但不删除元素，如果集合中没有元素，会返回<span class="function"><span class="keyword">null</span></span><br><span class="line"><span class="title">peekFirst</span><span class="params">()</span></span>;</span><br><span class="line">peekLast();</span><br><span class="line"></span><br><span class="line">获取元素，但元素会被删除，如果集合中没有元素，会返回<span class="keyword">null</span>:</span><br><span class="line">pollFirst();</span><br><span class="line">pollLast();</span><br></pre></td></tr></table></figure>
<h5 id="LinkedList方法演示示例"><a href="#LinkedList方法演示示例" class="headerlink" title="LinkedList方法演示示例"></a>LinkedList方法演示示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	LinedList link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">	link.add(<span class="string">"java01"</span>);</span><br><span class="line">	link.add(<span class="string">"java02"</span>);</span><br><span class="line">	link.add(<span class="string">"java03"</span>);</span><br><span class="line">	link.add(<span class="string">"java04"</span>);</span><br><span class="line">	System.out.println(link);</span><br><span class="line"></span><br><span class="line">	System.out.println(link.getFirst());</span><br><span class="line">	System.out.println(link.getLast());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-Collection概述]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Collection%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="为什么会出现集合类？"><a href="#为什么会出现集合类？" class="headerlink" title="为什么会出现集合类？"></a>为什么会出现集合类？</h2><ul>
<li>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象的操作，就对对象进行存储，集合就是存储对象最常用的一种方式。<h2 id="数组和集合类同是容器，有何不同？"><a href="#数组和集合类同是容器，有何不同？" class="headerlink" title="数组和集合类同是容器，有何不同？"></a>数组和集合类同是容器，有何不同？</h2></li>
<li>数组虽然也可以存储对象，但长度是固定的；集合的长度是可以改变的。</li>
<li>数组中可以存储基本数据类型；集合只能存储对象。</li>
</ul>
<a id="more"></a>
<p><img src="\images\java中集合类的关系图.png" alt="image"></p>
<h2 id="集合类的特点"><a href="#集合类的特点" class="headerlink" title="集合类的特点"></a>集合类的特点</h2><ul>
<li>集合只用于存储对象</li>
<li>集合的长度是可变的</li>
<li>集合可以存储不同类型的对象<h1 id="Collection体系示意图"><a href="#Collection体系示意图" class="headerlink" title="Collection体系示意图"></a>Collection体系示意图</h1><img src="\images\Collection.png" alt="image"><h2 id="Collection-练习"><a href="#Collection-练习" class="headerlink" title="Collection-练习"></a>Collection-练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		base_method();</span><br><span class="line">		method_2();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建两个集合</span></span><br><span class="line">		ArrayList al1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		ArrayList al2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//为两个集合分别添加对象，其中部分为相同对象</span></span><br><span class="line">		al1.add(<span class="string">"java01"</span>);</span><br><span class="line">		al1.add(<span class="string">"java02"</span>);</span><br><span class="line">		al1.add(<span class="string">"java03"</span>);</span><br><span class="line">		al1.add(<span class="string">"java04"</span>);</span><br><span class="line">		al2.add(<span class="string">"java03"</span>);</span><br><span class="line">		al2.add(<span class="string">"java04"</span>);</span><br><span class="line">		al2.add(<span class="string">"java05"</span>);</span><br><span class="line">		al2.add(<span class="string">"java06"</span>);</span><br><span class="line">		<span class="comment">//使用al1中只保留与al2有交集的对象</span></span><br><span class="line">		al1.removeAll(al2);</span><br><span class="line">		<span class="comment">//去除有交集的对象</span></span><br><span class="line">		al1.retainAll(al2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">base_method</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建一个集合</span></span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//添加对象到集合中</span></span><br><span class="line">		al.add(<span class="string">"java001"</span>);</span><br><span class="line">		al.add(<span class="string">"java002"</span>);</span><br><span class="line">		al.add(<span class="string">"java003"</span>);</span><br><span class="line">		al.add(<span class="string">"java004"</span>);</span><br><span class="line">		<span class="comment">//打印集合</span></span><br><span class="line">		sop(<span class="string">"原集合："</span>+al);</span><br><span class="line">		<span class="comment">//移除集合中的某个对象</span></span><br><span class="line">		al.remove(<span class="string">"java002"</span>);</span><br><span class="line">		<span class="comment">//判断集合是否包含某一对象</span></span><br><span class="line">		sop(<span class="string">"判断："</span>+al.contains(<span class="string">"java003"</span>));</span><br><span class="line">		<span class="comment">//清除集合中的所有对象</span></span><br><span class="line">		al.clear();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基本数据类型对象包装类]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-01-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB.html</url>
      <content type="html"><![CDATA[<ul>
<li>基本数据类型对象包装类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>        Byte</span><br><span class="line"><span class="keyword">short</span>       Short</span><br><span class="line"><span class="keyword">int</span>         Integer</span><br><span class="line"><span class="keyword">long</span>        Long</span><br><span class="line"><span class="keyword">boolean</span>     Boolean</span><br><span class="line"><span class="keyword">float</span>       Float</span><br><span class="line"><span class="keyword">double</span>      Double</span><br><span class="line"><span class="keyword">char</span>        Character</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>最常见的作用</p>
<ul>
<li>用于基本数据类型和字符串类型之间做转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型转成字符串</span><br><span class="line">    基本数据类型包装类+<span class="string">""</span></span><br><span class="line">    基本数据类型包装类.toString(基本数据类型值);</span><br><span class="line">    如：Integer.toString(<span class="number">34</span>); <span class="comment">//将整数34专车成"34"</span></span><br><span class="line">字符串转成基本数据类型</span><br><span class="line">    基本数据类型包装类.parseXxx(基本数据类型值);</span><br><span class="line">    如：<span class="keyword">int</span> a = Integer.parseInteger(<span class="string">"123"</span>);<span class="comment">//  a=123</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>十进制转成其他进制</p>
<ul>
<li>toBinaryString();</li>
<li>toHexString();</li>
<li>toOctalString();</li>
</ul>
</li>
<li>其他进制转成十进制<ul>
<li>parseInt(string,radix);</li>
</ul>
</li>
</ul>
<p>JDK1.5 版本以后出现的新特性：自动装箱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如：Integer x = <span class="number">4</span>; --》Integer = <span class="keyword">new</span> Integer(<span class="number">4</span>);</span><br><span class="line">    x = x + <span class="number">2</span>; <span class="comment">//x+2中x进行自动拆箱，变成了int类型，和2进行加法运算，再将和值进行装箱赋给x</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String类-概述]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-30-String%E7%B1%BB-%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><ul>
<li><p>String 类代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。</p>
</li>
<li><p>字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。例如：</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure>
<p>等效于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br></pre></td></tr></table></figure></p>
<p>下面给出了一些如何使用字符串的更多示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">String cde = <span class="string">"cde"</span>;</span><br><span class="line">System.out.println(<span class="string">"abc"</span> + cde);</span><br><span class="line">String c = <span class="string">"abc"</span>.substring(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">String d = cde.substring(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>String 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。大小写映射基于 Character 类指定的 Unicode 标准版。</li>
<li>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。字符串串联是通过 StringBuilder（或 StringBuffer）类及其 append 方法实现的。字符串转换是通过 toString 方法实现的，该方法由 Object 类定义，并可被 Java 中的所有类继承。有关字符串串联和转换的更多信息，请参阅 Gosling、Joy 和 Steele 合著的 The Java Language Specification。<br>除非另行说明，否则将 null 参数传递给此类中的构造方法或方法将抛出 NullPointerException。</li>
<li>String 表示一个 UTF-16 格式的字符串，其中的增补字符 由代理项对 表示（有关详细信息，请参阅 Character 类中的 Unicode 字符表示形式）。索引值是指 char 代码单元，因此增补字符在 String 中占用两个位置。</li>
<li>String 类提供处理 Unicode 代码点（即字符）和 Unicode 代码单元（即 char 值）的方法。</li>
<li>特点：字符串一旦被初始化，就无法再改变。</li>
<li>String类中重写了Object类的equals方法，该方法在String类中是用于判断两个字符串的内容是否相同</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comstring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s1 = <span class="string">"abc"</span>;<span class="comment">//  s1是一个类类型变量名，abc代表一个对象</span></span><br><span class="line">		<span class="comment">//字符串最大的特点：一旦被初始化就无法改变。</span></span><br><span class="line">		String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);<span class="comment">//  s2在内存中有两个对象，一个是abc，一个是new对象</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(s1==s2);</span><br><span class="line">		<span class="comment">// s1==s2  比较的是两个对象在内存中的地址值（哈希值）</span></span><br><span class="line">		System.out.println(s1.equals(s2));</span><br><span class="line">		<span class="comment">//s1.equals(s2)  String类中重写了equals方法，该方法用于判定字符串内容是否相同</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>String类适用于描述字符串事物，并且提供了多个方法对字符串进行操作</p>
<h3 id="String类的常见操作"><a href="#String类的常见操作" class="headerlink" title="String类的常见操作"></a>String类的常见操作</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul>
<li>字符串中的包含的字符数，也就是字符串的长度。 获取长度 <code>int length();</code></li>
<li>根据位置获取位置上的某个字符。  <code>char charAt(int index);</code></li>
<li>根据字符获取该字符在字符串中的位置<ul>
<li><code>int indexOf(int ch)</code>：返回的是ch在字符串中第一次出现的位置</li>
<li><code>int indexOf(int ch, int fromIndex)</code>：从fromIndex指定位置开始，获取ch在字符串中出现的位置</li>
<li><code>int indexOf(String str)</code>：返回的是str在字符串中第一次出现的位置</li>
<li><code>int indexOf(String str, int fromIndex)</code>：从fromIndex指定位置开始，获取str在字符串中出现的位置</li>
<li><code>int lastIndexOf(int ch)</code>：返回的是ch从右至左在字符串中第一次出现的位置，其他几个方法同理<h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4></li>
</ul>
</li>
<li>字符串中是否包含某一个子串： <code>boolean contains(str);</code><ul>
<li>特殊之处：indexOf(str); 可以索引str第一次出现的位置，如果返回-1，表示该str不在字符串中存在；</li>
<li>所以，它也可以用于对指定判断是否包含    <code>if(str.indexOf(&quot;aa&quot;)!=-1)</code></li>
<li>该方法可以既可以判断是否包含，也可以获取str出现的位置</li>
</ul>
</li>
<li>字符串中是否有内容： <code>boolean isEmpty();</code>  原理就是判断长度是否为0</li>
<li>字符串是否是以指定内容开头： <code>boolean startsWith(str);</code></li>
<li>字符串是否是以指定内容结尾： <code>boolean endsWith(str);</code></li>
<li>判断字符串内容是否相同，复写了Object类中的equals方法： <code>boolean equals(str);</code></li>
<li>判断内容是否相同，并忽略大小写： <code>boolean equalsIgnoreCase();</code><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4></li>
<li>将字符数组转成字符串<ul>
<li>构造函数：<code>String(char[]);</code>    <code>String(char[],offset,count);</code></li>
<li>静态方法：<code>static String copyValueOf(char[])</code>      <code>static String copyValueOf(char[],offset,count)</code>    <code>static String valueOf(char[])</code></li>
</ul>
</li>
<li>将字符串转成字符数组：<code>char[] toCharArray()</code></li>
<li>将字节数组转成字符串：<code>String(byte[]);</code>  <code>String(byte[],offset,count);</code></li>
<li>将字符串转成字节数组：<code>byte[] getBytes();</code></li>
<li>将基本数据类型转成字符串：<code>String valueOf(int)</code>   <code>static String valueOf(double)</code><br>特殊：字符串和字节数组在转换过程中，是可以指定编码表的。<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4></li>
<li><code>String replace(oldchar,newchar);</code><h4 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h4></li>
<li><code>String[] split(regex);</code><h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4></li>
<li>获取字符串中的一部分：<ul>
<li><code>String substring(begin);</code>  从指定位置开始到结尾，如果角标不存在，会出现字符串角标越界异常</li>
<li><code>String substring(begin,end);</code> 从指定位置开始，不包含结尾位置的字符<h4 id="转换、去除空格、比较"><a href="#转换、去除空格、比较" class="headerlink" title="转换、去除空格、比较"></a>转换、去除空格、比较</h4></li>
</ul>
</li>
<li>转换：将字符串转成大写或小写  <code>String toUpperCase();</code>  <code>String toLowerCase();</code></li>
<li>去除空格：将字符串两端的多个空格去除  <code>String trim();</code></li>
<li>比较：对两个字符串进行自然顺序的比较  <code>int compareTo(String);</code></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程练习-生产者消费者代码优化]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%83%E4%B9%A0-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>JDK1.5版本中提供了对多线程功能的升级解决方案</p>
<ul>
<li>将<code>同步synchronized</code>替换成显示<code>lock</code>的操作</li>
<li>将<code>Object</code>中的<code>wait</code>,<code>notify</code>,<code>notifyAll</code>方法替换成了<code>condition</code>对象</li>
<li>该对象可以对<code>lock</code>进行获取</li>
</ul>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comthread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recouse</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">	<span class="keyword">private</span> Condition condition_pro = lock.newCondition();</span><br><span class="line">	<span class="keyword">private</span> Condition condition_con = lock.newCondition();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span><span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(flag)</span><br><span class="line">			condition_pro.await();</span><br><span class="line">		<span class="keyword">this</span>.name = name + <span class="string">"--"</span> + count++;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"..生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">true</span>;</span><br><span class="line">		condition_con.signal();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span><span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(!flag)</span><br><span class="line">			condition_con.await();</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"....消费者...."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">false</span>;</span><br><span class="line">		condition_pro.signal();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Recouse rec;</span><br><span class="line">	Producer(Recouse rec)&#123;</span><br><span class="line">		<span class="keyword">this</span>.rec = rec;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				rec.set(<span class="string">"++商品++"</span>);</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Recouse rec;</span><br><span class="line">	Consumer(Recouse rec)&#123;</span><br><span class="line">		<span class="keyword">this</span>.rec = rec;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				rec.out();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	Recouse rec = <span class="keyword">new</span> Recouse();</span><br><span class="line">	Producer pro = <span class="keyword">new</span> Producer(rec);</span><br><span class="line">	Consumer con = <span class="keyword">new</span> Consumer(rec);</span><br><span class="line">	Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">	Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">	Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">	Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">	t1.start();</span><br><span class="line">	t2.start();</span><br><span class="line">	t3.start();</span><br><span class="line">	t4.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">Thread-<span class="number">0</span>..生产者..++商品++--<span class="number">1</span></span><br><span class="line">Thread-<span class="number">2</span>....消费者....++商品++--<span class="number">1</span></span><br><span class="line">Thread-<span class="number">1</span>..生产者..++商品++--<span class="number">2</span></span><br><span class="line">Thread-<span class="number">3</span>....消费者....++商品++--<span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span>..生产者..++商品++--<span class="number">3</span></span><br><span class="line">Thread-<span class="number">2</span>....消费者....++商品++--<span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Thread-<span class="number">1</span>..生产者..++商品++--<span class="number">31461</span></span><br><span class="line">Thread-<span class="number">3</span>....消费者....++商品++--<span class="number">31461</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[懒汉式单例设计模式-多线程同步操作方法]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"><span class="comment">//懒汉式单例设计模式：具备延迟加载的功能；在多线程中需要进行同步操作，锁的对象是该类的字节码文件对象</span></span><br><span class="line"><span class="comment">//为了避免懒汉式的低效特点，需要进行两次判定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingleDemo s = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleDemo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(SingleDemo.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s == <span class="keyword">null</span>)</span><br><span class="line">			s = <span class="keyword">new</span> SingleDemo();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我不知道你，但我认识你]]></title>
      <url>http://blog.zyzhy.com/posts/dreamlife/2016-06-18-%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%EF%BC%8C%E4%BD%86%E6%88%91%E8%AE%A4%E8%AF%86%E4%BD%A0.html</url>
      <content type="html"><![CDATA[<p>我不知道你的名字<br>但我一直都知道你的样子<br>一张肥嘟嘟的粉嫩小脸<br>总是天真地笑着，又不知所以地哭着<br>一双又黑又亮的大眼睛<br>总是高兴地看着，又懵懂可爱地眨着<br><a id="more"></a></p>
<p>我不知道你是男孩，还是女孩<br>但我一直都知道你很漂亮<br>你没有扰人的苦恼<br>无论是笑着，或是哭着<br>都是灿烂的，阳光的<br>这是你天生的魅力</p>
<p>我还没听过你的声音<br>但我想，那一定是轻灵的、甜甜的<br>你会很喜欢唱歌<br>把你的快乐唱给所有人听<br>或许还会给我们讲一讲你每天的故事</p>
<p>我想看你奔跑时的样子<br>摔倒了，对身边的人笑一笑<br>然后爬起来，拍一拍衣服上的尘土<br>就这样跑着，笑着<br>我会循着你的影子一直跟着，看着</p>
<p>有一天，我会陪着你在清晨跑步<br>带你去认识很多的朋友<br>我们看着花开，听着蝉鸣，闻着稻香，舔着雪花<br>你在长大<br>而我，会陪在你的每一个秋冬春夏</p>
<p>有一天，你会牵着我在傍晚散步<br>带我去看看过去的朋友<br>我们等着花开，守着蝉鸣，尝着稻香，踏着雪花<br>我在老去<br>而你，会牵着我的每一个秋冬春夏  </p>
]]></content>
    </entry>
    
  
  
</search>
