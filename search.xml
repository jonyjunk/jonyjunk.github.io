<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[IO流-模拟BufferederReader]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-12-IO%E6%B5%81-%E6%A8%A1%E6%8B%9FBufferedReader%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<h2 id="通过StringBuilder的方法来模拟BufferedReader功能"><a href="#通过StringBuilder的方法来模拟BufferedReader功能" class="headerlink" title="通过StringBuilder的方法来模拟BufferedReader功能"></a>通过StringBuilder的方法来模拟BufferedReader功能</h2><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBufferedReader</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> FileReader r;</span><br><span class="line">	MyBufferedReader(FileReader r)&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">myReadLine</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		<span class="comment">//定义一个StringBuilder容器临时存储读取到的字符</span></span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="comment">//初始化一个整型变量</span></span><br><span class="line">		<span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//如果文件中存在数据则进行循环操作</span></span><br><span class="line">		<span class="keyword">while</span>((ch=r.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="comment">//如果读取到\r（回车符），则返回while继续循环操作</span></span><br><span class="line">			<span class="keyword">if</span>(ch==<span class="string">'\r'</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">//如果读取到\n（换行符），则返回读取到的数据</span></span><br><span class="line">			<span class="keyword">if</span>(ch==<span class="string">'\n'</span>)</span><br><span class="line">				<span class="keyword">return</span> sb.toString();</span><br><span class="line">			<span class="comment">//如果读取完成，则将ch强转为char类型数据，并将读取到的数据添加到sb中</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				sb.append((<span class="keyword">char</span>)ch);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果sb中有数据，则返回读取到的数据</span></span><br><span class="line">		<span class="keyword">if</span>(sb.length()!=<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> sb.toString();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myClose</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		<span class="comment">//调用FileReader中的close方法关闭流资源</span></span><br><span class="line">		r.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBufferedReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">		MyBufferedReader mybu =<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			fr = <span class="keyword">new</span> FileReader(<span class="string">"buff.txt"</span>);</span><br><span class="line">			mybu = <span class="keyword">new</span> MyBufferedReader(fr);</span><br><span class="line">			String line = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>((line=mybu.myReadLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				System.out.println(line);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取失败"</span>);</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(fr!=<span class="keyword">null</span>)</span><br><span class="line">					mybu.myClose();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"关闭读取流失败"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IO流-copy练习]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-12-IO%E6%B5%81-copy%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<h1 id="FileWriter和FileReader综合练习"><a href="#FileWriter和FileReader综合练习" class="headerlink" title="FileWriter和FileReader综合练习"></a>FileWriter和FileReader综合练习</h1><h2 id="需求-复制一个文档类型的文件到硬盘上"><a href="#需求-复制一个文档类型的文件到硬盘上" class="headerlink" title="需求:复制一个文档类型的文件到硬盘上"></a>需求:复制一个文档类型的文件到硬盘上</h2><a id="more"></a>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyText</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		copy();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span>&#123;</span><br><span class="line">		FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">		FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			fw = <span class="keyword">new</span> FileWriter(<span class="string">"demo_copy.txt"</span>);</span><br><span class="line">			fr = <span class="keyword">new</span> FileReader(<span class="string">"demo.txt"</span>);</span><br><span class="line">			<span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>((len=fr.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">				fw.write(buf,<span class="number">0</span>,len);</span><br><span class="line">				<span class="comment">//打印复制的文件到控制台上</span></span><br><span class="line">				System.out.print(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">			System.out.println(e.toString());</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(fw!=<span class="keyword">null</span>)</span><br><span class="line">				fw.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				System.out.println(e.toString());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(fr!=<span class="keyword">null</span>)</span><br><span class="line">				fr.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				System.out.println(e.toString());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="需求：运用缓冲区技术复制一个文件到硬盘上"><a href="#需求：运用缓冲区技术复制一个文件到硬盘上" class="headerlink" title="需求：运用缓冲区技术复制一个文件到硬盘上"></a>需求：运用缓冲区技术复制一个文件到硬盘上</h2><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyBufferText</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">		BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"demo.txt"</span>));</span><br><span class="line">			bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"CopyText.txt"</span>));</span><br><span class="line">			String line = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				bw.write(line);</span><br><span class="line">				bw.newLine();</span><br><span class="line">				bw.flush();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读写失败"</span>);</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(br!=<span class="keyword">null</span>)</span><br><span class="line">					br.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取流关闭失败"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(bw!=<span class="keyword">null</span>)</span><br><span class="line">					bw.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"写入流关闭失败"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="FileOutputStream和FileInputStream综合练习"><a href="#FileOutputStream和FileInputStream综合练习" class="headerlink" title="FileOutputStream和FileInputStream综合练习"></a>FileOutputStream和FileInputStream综合练习</h1><h2 id="需求：用字节流的方法复制一个图片"><a href="#需求：用字节流的方法复制一个图片" class="headerlink" title="需求：用字节流的方法复制一个图片"></a>需求：用字节流的方法复制一个图片</h2><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyPicText</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(<span class="string">"1.jpg"</span>);</span><br><span class="line">			fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"2.jpg"</span>);</span><br><span class="line">			<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>((len=fis.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">				fos.write(b,<span class="number">0</span>,len);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"复制失败"</span>);</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(fis!=<span class="keyword">null</span>)</span><br><span class="line">					fis.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"写入流关闭失败"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(fos!=<span class="keyword">null</span>)</span><br><span class="line">					fos.close();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取流关闭失败"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IO流（Input Output）]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-12-IO%E6%B5%81.html</url>
      <content type="html"><![CDATA[<h1 id="IO流概述"><a href="#IO流概述" class="headerlink" title="IO流概述"></a>IO流概述</h1><ul>
<li>IO流用来处理设备之间的数据传输</li>
<li>Java对数据的操作是通过流的方式</li>
<li>Java用于操作流的对象都在IO包中</li>
<li>流按操作数据分为两种：字节流和字符流</li>
<li>流按流向分为：输入流和输出流</li>
</ul>
<a id="more"></a>
<h2 id="IO流的常用基类"><a href="#IO流的常用基类" class="headerlink" title="IO流的常用基类"></a>IO流的常用基类</h2><ul>
<li>字节流的抽象基类<ul>
<li>InputStream，OutputStream</li>
</ul>
</li>
<li>字符流的抽象基类<ul>
<li>Reader，Writer</li>
</ul>
</li>
<li>注：由这四个类派生出来的子类名称都是以其父类名作为子类名的后缀<ul>
<li>如：IntputSream的子类FileInputStream</li>
<li>如：Reader的子类FileReader</li>
</ul>
</li>
</ul>
<h2 id="常用基类示例"><a href="#常用基类示例" class="headerlink" title="常用基类示例"></a>常用基类示例</h2><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="FileWriter示例"><a href="#FileWriter示例" class="headerlink" title="FileWriter示例"></a>FileWriter示例</h4><p>需求：在硬盘上创建一个文件，并写入数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterDemo</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">	<span class="comment">//创建一个FileWriter对象，该对象一被初始化就必须要明确被操作的文件</span></span><br><span class="line">	<span class="comment">//而且该文件会被创建到指定目录下，如果该目录下已有同名文件，将被覆盖</span></span><br><span class="line">	<span class="comment">//其实该步骤就是在明确数据的存放目的地</span></span><br><span class="line">	FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>);</span><br><span class="line">	<span class="comment">//调用write方法，将字符串写入到流中</span></span><br><span class="line">	fw.write(<span class="string">"abcdef"</span>);</span><br><span class="line">	<span class="comment">//刷新流中写入的数据，并存放在指定文件中</span></span><br><span class="line">	fw.flush();</span><br><span class="line">	<span class="comment">//关闭该流，在此之前先刷新</span></span><br><span class="line">	fw.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="FileReader示例"><a href="#FileReader示例" class="headerlink" title="FileReader示例"></a>FileReader示例</h4><p>需求：读取硬盘中的某一文件内容<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package comio;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class FileReaderDemo &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) throws IOException&#123;</span><br><span class="line">		//创建读取的对象，传入要读取的文件</span><br><span class="line">		FileReader fd = new FileReader("demo.txt");</span><br><span class="line">		//定义一个数组用来临时存放读取到的数据</span><br><span class="line">		char[] buf = new char[1024];//数组长度通常定义为1024的整数倍以减少读取的循环次数</span><br><span class="line">		//read(char[])；返回的是读取数据的个数</span><br><span class="line">		int num = 0;</span><br><span class="line">		while((num=fd.read(buf))!=-1)&#123;</span><br><span class="line">		//new String(char[],first,end);表示输出数组中的数据，并指定数组开始和结束的位置</span><br><span class="line">			System.out.println("num:"+num+"--"+new String(buf,0,num));</span><br><span class="line">		&#125;</span><br><span class="line">		fd.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### IO流异常处理方式示例</span><br><span class="line">``` java</span><br><span class="line">package comio;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class WriterExceptionDemo &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		FileWriter fw = null;</span><br><span class="line">		try&#123;</span><br><span class="line">			//FileWriter（String name,boolean b）代表着在文件中数据的末尾处续写数据</span><br><span class="line">			fw = new FileWriter("demo.txt",true);</span><br><span class="line">			fw.write("adadfdf");</span><br><span class="line">		&#125;catch(IOException e)&#123;</span><br><span class="line">			System.out.println(e.toString());</span><br><span class="line">		&#125;finally&#123;</span><br><span class="line">			try&#123;</span><br><span class="line">				if(fw!=null)</span><br><span class="line">					fw.close();</span><br><span class="line">				&#125;catch(IOException e)&#123;</span><br><span class="line">					System.out.println(e.toString());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="字符流的缓冲区"><a href="#字符流的缓冲区" class="headerlink" title="字符流的缓冲区"></a>字符流的缓冲区</h4><ul>
<li>缓冲区的出现提高了对数据的读写效率</li>
<li>对应类<ul>
<li>BufferedWriter</li>
<li>BufferedReader</li>
</ul>
</li>
<li>缓冲区要结合流才可以使用</li>
<li>在流的基础上对流的功能进行了增强<h5 id="BufferedWriter示例"><a href="#BufferedWriter示例" class="headerlink" title="BufferedWriter示例"></a>BufferedWriter示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriteDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"buff.txt"</span>);</span><br><span class="line">		BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; <span class="number">5</span>;x++)&#123;</span><br><span class="line">			bw.write(<span class="string">"abcde"</span>+x);</span><br><span class="line">			<span class="comment">//BufferedWriter中提供了换行功能newLine();</span></span><br><span class="line">			bw.newLine();</span><br><span class="line">			bw.flush();</span><br><span class="line">		&#125;</span><br><span class="line">		bw.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="BufferedReader示例"><a href="#BufferedReader示例" class="headerlink" title="BufferedReader示例"></a>BufferedReader示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//创建一个读取流的缓冲区对象与读取流对象相关联</span></span><br><span class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"buff.txt"</span>);</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">		<span class="comment">//初始化line为null</span></span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//br.readLine()；是让缓冲区对象一次读取一行的方法</span></span><br><span class="line">		<span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(line);</span><br><span class="line">		&#125;</span><br><span class="line">		br.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="LineNumberReader示例"><a href="#LineNumberReader示例" class="headerlink" title="LineNumberReader示例"></a>LineNumberReader示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineNumberReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"demo.txt"</span>);</span><br><span class="line">		LineNumberReader lnr = <span class="keyword">new</span> LineNumberReader(fr);</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>((line=lnr.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(lnr.getLineNumber()+<span class="string">":"</span>+line);</span><br><span class="line">		&#125;</span><br><span class="line">		lnr.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="FileOutputStream和FileInputStream示例"><a href="#FileOutputStream和FileInputStream示例" class="headerlink" title="FileOutputStream和FileInputStream示例"></a>FileOutputStream和FileInputStream示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileStreamDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		outputStreamMethod();</span><br><span class="line">		readMethod_1();</span><br><span class="line">		readMethod_2();</span><br><span class="line">		readMethod_3();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//该方法是通过获取文件中数据个数的方式定义指定个数的字节数组来读取文件</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readMethod_1</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"demo.txt"</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len=fis.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">			System.out.println(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));</span><br><span class="line">		&#125;</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//该方法是通过字节数组作为缓冲区的方式读取文件</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readMethod_2</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"demo.txt"</span>);</span><br><span class="line">		<span class="comment">//fis.available();获取fis对象的字节个数，该方法返回int值</span></span><br><span class="line">		<span class="comment">//如果遇到文件较大的情况下，该方法可能导致内存溢出的风险，不建议使用</span></span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">		fis.read(b);</span><br><span class="line">		System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//该方法是一个字节一个字节地读取文件中的数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readMethod_3</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"demo.txt"</span>);</span><br><span class="line">		<span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((ch=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">			System.out.println((<span class="keyword">char</span>)ch);</span><br><span class="line">		&#125;</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//该方法是写入字节流的示例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputStreamMethod</span><span class="params">()</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"outstream.txt"</span>);</span><br><span class="line">		fos.write(<span class="string">"hkhdfsa"</span>.getBytes());</span><br><span class="line">		fos.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="字节流缓冲区演示"><a href="#字节流缓冲区演示" class="headerlink" title="字节流缓冲区演示"></a>字节流缓冲区演示</h5><p>需求：通过字节流缓冲区复制一个pdf文件，打印所需要的时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comio;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedOutInDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">		</span><br><span class="line">		BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"io.pdf"</span>));</span><br><span class="line">		BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"y.pdf"</span>));</span><br><span class="line">		<span class="keyword">int</span> by = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((by=bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">			bos.write(by);</span><br><span class="line">		&#125;</span><br><span class="line">		bos.close();</span><br><span class="line">		bis.close();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">		System.out.println((end-start)+<span class="string">"毫秒"</span>);<span class="comment">//输出复制文件的所耗费的时间		</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-Generic泛型概述]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-05-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Generic%E6%B3%9B%E5%9E%8B%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<h1 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h1><p>泛型：<code>JDK1.5版本</code>以后出现的新特性，用于解决安全问题，是一个安全机制。<br><a id="more"></a></p>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol>
<li>将运行时期出现的问题ClassCastException转移到了编译时期，便于程序员解决问题，让运行时期的问题减少，会使程序更安全。</li>
<li>避免了强制转换的麻烦。</li>
</ol>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>通过<code>&lt;&gt;</code>来定义要操作的引用数据类型。</p>
<h2 id="在使用java-提供的对象时，什么时候需要写泛型呢？"><a href="#在使用java-提供的对象时，什么时候需要写泛型呢？" class="headerlink" title="在使用java 提供的对象时，什么时候需要写泛型呢？"></a>在使用java 提供的对象时，什么时候需要写泛型呢？</h2><p>通常在集合框架中很常见，只要见到<code>&lt;&gt;</code>就要定义泛型。<br>其实<code>&lt;&gt;</code>就是用来接收数据类型的，当使用集合时，将集合中要存储的数据类型作为参数传递到<code>&lt;&gt;</code>中即可。</p>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>通过泛型的运用，打印集合中字符串的长度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 在集合后面用&lt;&gt;添加对象元素类型，提高编译时的安全性</span></span><br><span class="line">		ArrayList&lt;String&gt; al = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		al.add(<span class="string">"daf"</span>);</span><br><span class="line">		al.add(<span class="string">"jkdag"</span>);</span><br><span class="line">		al.add(<span class="string">"jkgfjkl"</span>);</span><br><span class="line">		<span class="comment">// 在迭代器后面用&lt;&gt;添加对象元素类型，避免了强制转化的麻烦。</span></span><br><span class="line">		Iterator&lt;String&gt; it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			String s = it.next();</span><br><span class="line">			System.out.println(s+<span class="string">":"</span>+s.length());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">daf:<span class="number">3</span></span><br><span class="line">jkdag:<span class="number">5</span></span><br><span class="line">jkgfjkl:<span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>当类中要操作的引用数据类型不确定的时候，早起定义Object来完成扩展；<code>JDK1.5版本</code>以后可以通过泛型类的方式完成扩展。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tool</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> T t;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.t = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Tool t = <span class="keyword">new</span> Tool();</span><br><span class="line">		Work w = (Work)t.getObject();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-TreeSet练习]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-05-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-TreeSet%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="TreeSet练习"><a href="#TreeSet练习" class="headerlink" title="TreeSet练习"></a>TreeSet练习</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>将TreeSet中的字符串按照长度排序依次打印。<br><a id="more"></a></p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol>
<li>字符串本身具备比较性，但不是所需要的比较性</li>
<li>定义一个类作为字符串长度的比较器实现Comparator接口</li>
<li>当TreeSet中出现相同长度的字符串时，需要另外判断字符串内容，因为字符串本身的比较性，可以直接用compareTo来判断</li>
</ol>
<h3 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comtest;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringLenthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1,Object o2)</span></span>&#123;</span><br><span class="line">		String s1 = (String)o1;</span><br><span class="line">		String s2 = (String)o2;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="keyword">new</span> Integer(s1.length()).compareTo(<span class="keyword">new</span> Integer(s2.length()));</span><br><span class="line">		<span class="keyword">if</span>(num == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		TreeSet t = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> StringLenthComparator());</span><br><span class="line">		t.add(<span class="string">"abac"</span>);</span><br><span class="line">		t.add(<span class="string">"z"</span>);</span><br><span class="line">		t.add(<span class="string">"kjfkda"</span>);</span><br><span class="line">		t.add(<span class="string">"khdk"</span>);</span><br><span class="line">		t.add(<span class="string">"fj"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[z, fj, abac, khdk, kjfkda]</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-Set集合]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-04-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Set.html</url>
      <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="Set："><a href="#Set：" class="headerlink" title="Set："></a>Set：</h2><p>元素是无序的（存入和取出的顺序不一定一致），元素不可以重复。<br>Set集合的功能和Collection是一致的。<br><a id="more"></a></p>
<h3 id="HashSet："><a href="#HashSet：" class="headerlink" title="HashSet："></a>HashSet：</h3><p>底层的数据结构是<code>哈希表</code>。</p>
<h4 id="HashSet是如何保证元素唯一性的呢？"><a href="#HashSet是如何保证元素唯一性的呢？" class="headerlink" title="HashSet是如何保证元素唯一性的呢？"></a>HashSet是如何保证元素唯一性的呢？</h4><p>是通过元素的两个方法，hashCode和equals来完成的。<br>如果元素的hashcode值相同，才会判断equals是否为true；<br>如果元素的hashcode值不同，不会调用equals方法。</p>
<blockquote>
<p>注意：对于判断元素是否存在以及删除等操作，HashSet依赖的方法是元素的hashcode和equals方法。</p>
</blockquote>
<hr>
<h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comhashsey;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		HashSet hs = <span class="keyword">new</span> HashSet();</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"zhangsan"</span>,<span class="number">20</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"wangwu"</span>,<span class="number">21</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"zhangsan"</span>,<span class="number">22</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"wangwu"</span>,<span class="number">25</span>));</span><br><span class="line">		hs.add(<span class="keyword">new</span> Human(<span class="string">"zhangsan"</span>,<span class="number">22</span>));</span><br><span class="line">	</span><br><span class="line">		Iterator it = hs.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Human h = (Human)it.next();</span><br><span class="line">			System.out.println(h.getName()+<span class="string">"::"</span>+h.getAge());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	Human(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//复写Object类中hashCode方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//复写Object类中的equals方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Human))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		Human h = (Human)obj;<span class="comment">//多态类型强制转换</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name.equals(h.name) &amp;&amp; <span class="keyword">this</span>.age == h.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangsan::<span class="number">20</span></span><br><span class="line">wangwu::<span class="number">21</span></span><br><span class="line">zhangsan::<span class="number">22</span></span><br><span class="line">wangwu::<span class="number">25</span></span><br></pre></td></tr></table></figure>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet:"></a>TreeSet:</h3><p>可以对Set集合中的元素进行排序<br>底层的数据结构是二叉树<br>保证元素唯一性的依据是：在compareTo方法中return 0。</p>
<p><img src="\images\二叉树.png" alt="二叉树"></p>
<h4 id="TreeSet排序方式"><a href="#TreeSet排序方式" class="headerlink" title="TreeSet排序方式"></a>TreeSet排序方式</h4><ol>
<li>当元素自身具备比较性；元素需要实现Comparable接口，覆盖compareTo方法。这种方式也称为元素的自然顺序或默认顺序。</li>
<li>当元素自身不具备比较性时，或者具备的比较性不是所需要的，这时就需要让集合自身具备比较性。在集合初始化时，就有了比较方式。</li>
</ol>
<blockquote>
<p>当两种排序都存在时，以比较器为主。</p>
</blockquote>
<h5 id="如何定义比较器？"><a href="#如何定义比较器？" class="headerlink" title="如何定义比较器？"></a>如何定义比较器？</h5><p>定义一个类，实现Comparator接口，覆盖compare方法。</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>往TreeSet集合中存储自定义对象（学生），并按照学生的年龄进行排序。</p>
<blockquote>
<p>注意：排序时，当主要条件相同时，一定要判断一下次要条件。</p>
</blockquote>
<hr>
<h4 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comtest;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 将比较器传入TreeSet容器中调用其比较方法</span></span><br><span class="line">		TreeSet ts = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> MyCompare());</span><br><span class="line">		ts.add(<span class="keyword">new</span> Student(<span class="string">"lisi09"</span>,<span class="number">20</span>));</span><br><span class="line">		ts.add(<span class="keyword">new</span> Student(<span class="string">"lisi04"</span>,<span class="number">28</span>));</span><br><span class="line">		ts.add(<span class="keyword">new</span> Student(<span class="string">"lisi07"</span>,<span class="number">14</span>));</span><br><span class="line">		ts.add(<span class="keyword">new</span> Student(<span class="string">"lisi01"</span>,<span class="number">20</span>));</span><br><span class="line">		</span><br><span class="line">		Iterator it = ts.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Student s = (Student)it.next();</span><br><span class="line">			System.out.println(s.getName()+<span class="string">"::"</span>+s.getAge());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	Student(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//实现Comparable接口中的compareTo方法，返回int类型值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		<span class="comment">//先判断Student是否为obj的实例，不是需抛出异常</span></span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Student))</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"对象不符合"</span>);</span><br><span class="line">		Student s = (Student)obj;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.age&gt;s.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="comment">//如果判断年龄相同，则需继续判断姓名是否相同</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.age==s.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(s.name);</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个比较器，实现Comparator接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line">	<span class="comment">// 覆盖compare方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1,Object o2)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 强转对象</span></span><br><span class="line">		Student s1 = (Student)o1;</span><br><span class="line">		Student s2 = (Student)o2;</span><br><span class="line">		<span class="comment">// 定义num记录对象name的compaTo返回值</span></span><br><span class="line">		<span class="keyword">int</span> num = s1.getName().compareTo(s2.getName());</span><br><span class="line">		<span class="comment">// 当name相同时，判断age并返回其compareTo的返回值</span></span><br><span class="line">		<span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Integer(s1.getAge()).compareTo(<span class="keyword">new</span> Integer(s2.getAge()));</span><br><span class="line">		<span class="comment">// 当name不相同时，返回记录值num</span></span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果:"></a>输出结果:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lisi01::<span class="number">20</span></span><br><span class="line">lisi04::<span class="number">28</span></span><br><span class="line">lisi07::<span class="number">14</span></span><br><span class="line">lisi09::<span class="number">20</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-ArrayList练习]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-04-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-ArrayList%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<h1 id="ArrayList练习"><a href="#ArrayList练习" class="headerlink" title="ArrayList练习"></a>ArrayList练习</h1><h2 id="需求1：去除重复元素"><a href="#需求1：去除重复元素" class="headerlink" title="需求1：去除重复元素"></a>需求1：去除重复元素</h2><p>将ArraList中相同的元素去除，只保留单一元素存入一个新的集合类<br><a id="more"></a></p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1、定义一个新的容器用来存放得到的元素<br>2、运用迭代器对容器中的元素进行迭代操作<br>3、在存入元素前，先判定新容器中是否已存在与该元素相同的元素<br>4、如果没有该相同元素，则运用add方法存入该元素<br>5、将以上步骤封装到一个方法中，返回类型为ArrayList，以便调用操作</p>
<h3 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java03"</span>);</span><br><span class="line">		al = singleElement(al);</span><br><span class="line">		System.out.println(al);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span>&#123;</span><br><span class="line">		<span class="comment">//新建一个存放元素的容器</span></span><br><span class="line">		ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//运用迭代器对原容器中的元素进行迭代操作</span></span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			<span class="comment">//定义一个对象用来指向迭代到的元素</span></span><br><span class="line">			Object obj = it.next();</span><br><span class="line">			<span class="comment">//判定新容器中是否已存在相同元素，false时存入</span></span><br><span class="line">			<span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">				newAl.add(obj);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> newAl;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[java01, java02, java03]</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="需求2：去除重复对象"><a href="#需求2：去除重复对象" class="headerlink" title="需求2：去除重复对象"></a>需求2：去除重复对象</h2><p>用ArrayList将重复的对象清除，并保留单一对象</p>
<h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>1、创建对象，声明对象的元素参数<br>2、复写Object类的equals方法，以便判定两个对象中的元素是否相同<br>3、新建容器，用来存储对象<br>4、运用Iterator迭代器对容器中的对象进行迭代操作<br>5、判定新容器中的对象是否与将要存入的相同后，取出单一对象存入新容器</p>
<h3 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comarraylisttest;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	Person(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">	<span class="comment">//对象运算符instanceof:测试某个对象是否是指定类或其子类的实例。</span></span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		Person p = (Person)obj;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">30</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">28</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">30</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">28</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">28</span>));</span><br><span class="line">		al.add(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="number">30</span>));</span><br><span class="line">		al = singleElement(al);</span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			</span><br><span class="line">			Person p = (Person)it.next();</span><br><span class="line">			<span class="comment">/*多态类型强制转换，实际代码为:</span><br><span class="line">			 * Object obj = it.next();</span><br><span class="line">			 * Person p = (Person)obj;</span><br><span class="line">			 */</span></span><br><span class="line">			System.out.println(p.getName()+<span class="string">".."</span>+p.getAge());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList <span class="title">singleElement</span><span class="params">(ArrayList al)</span></span>&#123;</span><br><span class="line">		ArrayList newAl = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Object obj = it.next();</span><br><span class="line">			<span class="keyword">if</span>(!newAl.contains(obj))</span><br><span class="line">				newAl.add(obj);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> newAl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangsan..<span class="number">30</span></span><br><span class="line">zhangsan..<span class="number">28</span></span><br><span class="line">lisi..<span class="number">30</span></span><br><span class="line">lisi..<span class="number">28</span></span><br></pre></td></tr></table></figure>
<h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><blockquote>
<p>List集合判断元素是否相同，实际上是依据元素的equals方法。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-LinkedList模拟堆栈、队列的数据结构]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-LinkedList%E6%A8%A1%E6%8B%9F%E5%A0%86%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
      <content type="html"><![CDATA[<h1 id="LinkedList-练习"><a href="#LinkedList-练习" class="headerlink" title="LinkedList 练习"></a>LinkedList 练习</h1><ul>
<li>通过封装LinkedList的添加、取出方法来模拟一个堆栈或队列的数据结构</li>
<li>运用LinkedList中的addFirst方法进行数据的依次存入</li>
<li>运用LinkedList中的removeFirst方法进行数据的逆向取出</li>
<li>运用LinkedList中的removeLast方法进行数据的依次取出</li>
<li>运用LinkedList中的isEmpty方法对LinkedList中是否有元素进行判定，以便进行数据的取出动作</li>
</ul>
<a id="more"></a>
<h2 id="用LinkedList方法模拟堆栈的数据结构"><a href="#用LinkedList方法模拟堆栈的数据结构" class="headerlink" title="用LinkedList方法模拟堆栈的数据结构"></a>用LinkedList方法模拟堆栈的数据结构</h2><p>数据先进后出，如同一个杯子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuiZhan</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> LinkedList link;</span><br><span class="line">	DuiZhan()&#123;</span><br><span class="line">		link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		link.addFirst(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">myGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.removeFirst();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//用LinkedList方法演示堆栈</span></span><br><span class="line">		DuiZhan dz = <span class="keyword">new</span> DuiZhan();</span><br><span class="line">		dz.myAdd(<span class="string">"java05"</span>);</span><br><span class="line">		dz.myAdd(<span class="string">"java06"</span>);</span><br><span class="line">		dz.myAdd(<span class="string">"java07"</span>);</span><br><span class="line">		dz.myAdd(<span class="string">"java08"</span>);</span><br><span class="line">		<span class="keyword">while</span>(!dz.isNull())&#123;</span><br><span class="line">			System.out.println(dz.myGet());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java08</span><br><span class="line">java07</span><br><span class="line">java06</span><br><span class="line">java05</span><br></pre></td></tr></table></figure></p>
<h2 id="用LinkedList方法模拟队列的数据结构"><a href="#用LinkedList方法模拟队列的数据结构" class="headerlink" title="用LinkedList方法模拟队列的数据结构"></a>用LinkedList方法模拟队列的数据结构</h2><p>数据先进先出，如同一个管子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuiLie</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> LinkedList link;</span><br><span class="line">	DuiLie()&#123;</span><br><span class="line">		link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAdd</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		link.addFirst(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">myGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.removeLast();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> link.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//用LinkedList方法演示队列</span></span><br><span class="line">		DuiLie dl = <span class="keyword">new</span> DuiZhan();</span><br><span class="line">		dl.myAdd(<span class="string">"java01"</span>);</span><br><span class="line">		dl.myAdd(<span class="string">"java02"</span>);</span><br><span class="line">		dl.myAdd(<span class="string">"java03"</span>);</span><br><span class="line">		dl.myAdd(<span class="string">"java04"</span>);</span><br><span class="line">		<span class="keyword">while</span>(!dl.isNull())&#123;</span><br><span class="line">			System.out.println(dl.myGet());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java01</span><br><span class="line">java02</span><br><span class="line">java03</span><br><span class="line">java04</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-List]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E9%9B%86%E5%90%88%E7%9A%84%E5%85%B1%E6%80%A7%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote>
<p>元素是有序的，并且可以重复；因为该集合体系有索引。</p>
<ul>
<li>ArrayList：底层的数据结构使用的是数组结构；特点：查询速度很快，但是增删稍慢，<code>线程不同步</code>。</li>
<li>LinkedList：底层使用的是链表数据结构；特点：增删速度快，查询稍慢。</li>
<li>Vector：底层是数组数据结构；特点：同ArrayList，但<code>线程同步</code>；被ArrayList替代了。<a id="more"></a>
</li>
</ul>
</blockquote>
<h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><blockquote>
<p>凡是可以操作角标的方法都是该体系特有的方法。</p>
</blockquote>
<ul>
<li><p>增</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(index,element);</span><br><span class="line">addAll(index,Collection);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove(index);</span><br></pre></td></tr></table></figure>
</li>
<li><p>改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(index,element);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get(index);</span><br><span class="line">subList(from,to);</span><br><span class="line">listIterator();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="List集合特有的迭代器，ListIrerator是Iterator的子接口"><a href="#List集合特有的迭代器，ListIrerator是Iterator的子接口" class="headerlink" title="List集合特有的迭代器，ListIrerator是Iterator的子接口"></a>List集合特有的迭代器，ListIrerator是Iterator的子接口</h4><p>在迭代时，不可以通过集合对象的方法操作集合中的元素，因为会发生ConcurrentModificationException异常；所以，在迭代时只能用迭代期的方法操作元素，可是Iterator方法是有限的，只能对元素进行判断、取出、删除的操作；如果需要其他的操作如：添加、修改等，就需要使用其子接口：ListIterator。</p>
<h4 id="演示示例"><a href="#演示示例" class="headerlink" title="演示示例"></a>演示示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methd</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java03"</span>);</span><br><span class="line"></span><br><span class="line">		sop(<span class="string">"原集合："</span>+al);</span><br><span class="line">		<span class="comment">//在指定位置添加元素</span></span><br><span class="line">		al.add(<span class="number">1</span>,<span class="string">"java09"</span>);</span><br><span class="line">		<span class="comment">//删除指定位置的元素</span></span><br><span class="line">		al.remove(<span class="number">2</span>);</span><br><span class="line">		<span class="comment">//修改元素</span></span><br><span class="line">		al.set(<span class="number">2</span>,<span class="string">"java007"</span>);</span><br><span class="line">		<span class="comment">//通过角标获取元素</span></span><br><span class="line">		sop(<span class="string">"get(1):"</span>+al.get(<span class="number">1</span>));</span><br><span class="line">		sop(al);</span><br><span class="line">		<span class="comment">//获取所有元素</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;al.size(); x++)&#123;</span><br><span class="line">			System.out.println(<span class="string">"al("</span>+x+<span class="string">")="</span>+al.get(x));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			sop(<span class="string">"next:"</span>+it.next());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//通过indexOf获取对象的位置</span></span><br><span class="line">		sop(<span class="string">"index = "</span>+al.indexOf(<span class="string">"java02"</span>));</span><br><span class="line">		List sub = al.subList(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">		sop(<span class="string">"sub="</span>+sub);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//演示列表迭代器</span></span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		al.add(<span class="string">"java01"</span>);</span><br><span class="line">		al.add(<span class="string">"java02"</span>);</span><br><span class="line">		al.add(<span class="string">"java03"</span>);</span><br><span class="line">		ListIterator li = al.listIterator();</span><br><span class="line">		<span class="keyword">while</span>(li.hasNext())&#123;</span><br><span class="line">			Object obj = li.next();</span><br><span class="line">			<span class="keyword">if</span>(obj.equals(<span class="string">"java02"</span>))</span><br><span class="line">				<span class="comment">//添加元素</span></span><br><span class="line">				li.add(<span class="string">"java008"</span>);</span><br><span class="line">				<span class="comment">//修改元素</span></span><br><span class="line">				li.set(<span class="string">"java006"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*</span><br><span class="line">		//在迭代过程中，删除元素</span><br><span class="line">		Iterator it = al.iterator();</span><br><span class="line">		while(it.hasNext())&#123;</span><br><span class="line">			Object obj = it.next();</span><br><span class="line"></span><br><span class="line">			if(obj.equals("java02"))</span><br><span class="line">				it.remove();//将java02的引用从集合中删除</span><br><span class="line">			sop("obj="+obj);</span><br><span class="line">		&#125;</span><br><span class="line">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul>
<li>枚举就是Vector特有的取出方式，和迭代器很像</li>
<li>因为枚举的名称以及方法的名称都过长，所以被迭代器取代了<h5 id="Vector演示示例"><a href="#Vector演示示例" class="headerlink" title="Vector演示示例"></a>Vector演示示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VectorDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line">	v.add(<span class="string">"java001"</span>);</span><br><span class="line">	v.add(<span class="string">"java002"</span>);</span><br><span class="line">	v.add(<span class="string">"java003"</span>);</span><br><span class="line"></span><br><span class="line">	Enumeration en = v.elements();</span><br><span class="line">	<span class="keyword">while</span>(en.hasMoreElements())&#123;</span><br><span class="line">		System.out.println(en.nextElement());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="LinkedList特有方法"><a href="#LinkedList特有方法" class="headerlink" title="LinkedList特有方法"></a>LinkedList特有方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">添加元素：</span><br><span class="line">addFirst();</span><br><span class="line">addLast();</span><br><span class="line"></span><br><span class="line">获取元素，但不删除元素，如果集合中没有元素，会出现NoSuchElementException：</span><br><span class="line">getFirst();</span><br><span class="line">getLast();</span><br><span class="line"></span><br><span class="line">获取元素，但元素会被删除，如果集合中没有元素，会出现NoSuchElementException：</span><br><span class="line">removeFirst();</span><br><span class="line">removeLast();</span><br><span class="line"></span><br><span class="line">在JDK1.6出现了替代方法：</span><br><span class="line">添加元素</span><br><span class="line">offerFirst();</span><br><span class="line">offerLast();</span><br><span class="line"></span><br><span class="line">获取元素，但不删除元素，如果集合中没有元素，会返回<span class="function"><span class="keyword">null</span></span><br><span class="line"><span class="title">peekFirst</span><span class="params">()</span></span>;</span><br><span class="line">peekLast();</span><br><span class="line"></span><br><span class="line">获取元素，但元素会被删除，如果集合中没有元素，会返回<span class="keyword">null</span>:</span><br><span class="line">pollFirst();</span><br><span class="line">pollLast();</span><br></pre></td></tr></table></figure>
<h5 id="LinkedList方法演示示例"><a href="#LinkedList方法演示示例" class="headerlink" title="LinkedList方法演示示例"></a>LinkedList方法演示示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	LinedList link = <span class="keyword">new</span> LinkedList();</span><br><span class="line">	link.add(<span class="string">"java01"</span>);</span><br><span class="line">	link.add(<span class="string">"java02"</span>);</span><br><span class="line">	link.add(<span class="string">"java03"</span>);</span><br><span class="line">	link.add(<span class="string">"java04"</span>);</span><br><span class="line">	System.out.println(link);</span><br><span class="line"></span><br><span class="line">	System.out.println(link.getFirst());</span><br><span class="line">	System.out.println(link.getLast());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集合框架-Collection概述]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Collection%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="为什么会出现集合类？"><a href="#为什么会出现集合类？" class="headerlink" title="为什么会出现集合类？"></a>为什么会出现集合类？</h2><ul>
<li>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象的操作，就对对象进行存储，集合就是存储对象最常用的一种方式。<h2 id="数组和集合类同是容器，有何不同？"><a href="#数组和集合类同是容器，有何不同？" class="headerlink" title="数组和集合类同是容器，有何不同？"></a>数组和集合类同是容器，有何不同？</h2></li>
<li>数组虽然也可以存储对象，但长度是固定的；集合的长度是可以改变的。</li>
<li>数组中可以存储基本数据类型；集合只能存储对象。</li>
</ul>
<a id="more"></a>
<p><img src="\images\java中集合类的关系图.png" alt="image"></p>
<h2 id="集合类的特点"><a href="#集合类的特点" class="headerlink" title="集合类的特点"></a>集合类的特点</h2><ul>
<li>集合只用于存储对象</li>
<li>集合的长度是可变的</li>
<li>集合可以存储不同类型的对象<h1 id="Collection体系示意图"><a href="#Collection体系示意图" class="headerlink" title="Collection体系示意图"></a>Collection体系示意图</h1><img src="\images\Collection.png" alt="image"><h2 id="Collection-练习"><a href="#Collection-练习" class="headerlink" title="Collection-练习"></a>Collection-练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comcollection;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		base_method();</span><br><span class="line">		method_2();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建两个集合</span></span><br><span class="line">		ArrayList al1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		ArrayList al2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//为两个集合分别添加对象，其中部分为相同对象</span></span><br><span class="line">		al1.add(<span class="string">"java01"</span>);</span><br><span class="line">		al1.add(<span class="string">"java02"</span>);</span><br><span class="line">		al1.add(<span class="string">"java03"</span>);</span><br><span class="line">		al1.add(<span class="string">"java04"</span>);</span><br><span class="line">		al2.add(<span class="string">"java03"</span>);</span><br><span class="line">		al2.add(<span class="string">"java04"</span>);</span><br><span class="line">		al2.add(<span class="string">"java05"</span>);</span><br><span class="line">		al2.add(<span class="string">"java06"</span>);</span><br><span class="line">		<span class="comment">//使用al1中只保留与al2有交集的对象</span></span><br><span class="line">		al1.removeAll(al2);</span><br><span class="line">		<span class="comment">//去除有交集的对象</span></span><br><span class="line">		al1.retainAll(al2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">base_method</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建一个集合</span></span><br><span class="line">		ArrayList al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		<span class="comment">//添加对象到集合中</span></span><br><span class="line">		al.add(<span class="string">"java001"</span>);</span><br><span class="line">		al.add(<span class="string">"java002"</span>);</span><br><span class="line">		al.add(<span class="string">"java003"</span>);</span><br><span class="line">		al.add(<span class="string">"java004"</span>);</span><br><span class="line">		<span class="comment">//打印集合</span></span><br><span class="line">		sop(<span class="string">"原集合："</span>+al);</span><br><span class="line">		<span class="comment">//移除集合中的某个对象</span></span><br><span class="line">		al.remove(<span class="string">"java002"</span>);</span><br><span class="line">		<span class="comment">//判断集合是否包含某一对象</span></span><br><span class="line">		sop(<span class="string">"判断："</span>+al.contains(<span class="string">"java003"</span>));</span><br><span class="line">		<span class="comment">//清除集合中的所有对象</span></span><br><span class="line">		al.clear();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		System.out.println(obj);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基本数据类型对象包装类]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-01-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB.html</url>
      <content type="html"><![CDATA[<ul>
<li>基本数据类型对象包装类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>        Byte</span><br><span class="line"><span class="keyword">short</span>       Short</span><br><span class="line"><span class="keyword">int</span>         Integer</span><br><span class="line"><span class="keyword">long</span>        Long</span><br><span class="line"><span class="keyword">boolean</span>     Boolean</span><br><span class="line"><span class="keyword">float</span>       Float</span><br><span class="line"><span class="keyword">double</span>      Double</span><br><span class="line"><span class="keyword">char</span>        Character</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>最常见的作用</p>
<ul>
<li>用于基本数据类型和字符串类型之间做转换<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型转成字符串</span><br><span class="line">    基本数据类型包装类+<span class="string">""</span></span><br><span class="line">    基本数据类型包装类.toString(基本数据类型值);</span><br><span class="line">    如：Integer.toString(<span class="number">34</span>); <span class="comment">//将整数34专车成"34"</span></span><br><span class="line">字符串转成基本数据类型</span><br><span class="line">    基本数据类型包装类.parseXxx(基本数据类型值);</span><br><span class="line">    如：<span class="keyword">int</span> a = Integer.parseInteger(<span class="string">"123"</span>);<span class="comment">//  a=123</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>十进制转成其他进制</p>
<ul>
<li>toBinaryString();</li>
<li>toHexString();</li>
<li>toOctalString();</li>
</ul>
</li>
<li>其他进制转成十进制<ul>
<li>parseInt(string,radix);</li>
</ul>
</li>
</ul>
<p>JDK1.5 版本以后出现的新特性：自动装箱<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如：Integer x = <span class="number">4</span>; --》Integer = <span class="keyword">new</span> Integer(<span class="number">4</span>);</span><br><span class="line">    x = x + <span class="number">2</span>; <span class="comment">//x+2中x进行自动拆箱，变成了int类型，和2进行加法运算，再将和值进行装箱赋给x</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String练习]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-01-String%E7%BB%83%E4%B9%A0%EF%BC%88%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BE%83%E5%A4%A7%E7%9A%84%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89.html</url>
      <content type="html"><![CDATA[<p><img src="images\6631736268768765166.jpg" alt="image"></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comstring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		String s1 = <span class="string">"hkdsafgogonl"</span>;</span><br><span class="line">		String s2 = <span class="string">"dfashgogokjkfd"</span>;</span><br><span class="line">		sop(getMaxSubString(s1,s2));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sop</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">		System.out.println(str);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMaxSubString</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">		String max = <span class="string">""</span>,min = <span class="string">""</span>;<span class="comment">//声明两个字符串，一个较长，一个较短</span></span><br><span class="line">		max = (s1.length()&gt;s2.length())?s1:s2;<span class="comment">//如果s1比s2长，则max=s1；反之max=s2</span></span><br><span class="line">		min = (max==s1)?s2:s1;<span class="comment">//如果max=s1,则min=s2；反之，min=s1</span></span><br><span class="line">		<span class="comment">//通过分析，需要用嵌套循环的方式遍历两个字符串，找到两个字符串中较大的相同子串</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;min.length();x++)&#123;</span><br><span class="line">			<span class="comment">//定义较短字符串遍历的起始位置为0角标，结束位置为较短字符串最长位置递减（-x）</span></span><br><span class="line">			<span class="comment">//并且，遍历的结束位置不超过较短字符串的最长位置</span></span><br><span class="line">			<span class="comment">//起始位置和结束位置递增循环</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>,z = min.length()-x	; z!=min.length()+<span class="number">1</span> ; y++,z++)&#123;</span><br><span class="line">				String temp = min.substring(y,z);<span class="comment">//获取遍历到的所有字符串子串</span></span><br><span class="line">				<span class="keyword">if</span>(max.contains(temp))<span class="comment">//如果较长字符串中包含遍历到的字符串子串</span></span><br><span class="line">				<span class="keyword">return</span> temp;<span class="comment">//返回该子串即为两个字符串中最大的相同子串</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[StringBuffer类-概述]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-07-01-StringBuffer%E7%B1%BB-%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><blockquote>
<p>StringBuffer是字符串缓冲区，即一个容器</p>
</blockquote>
<a id="more"></a>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>它的长度是可以变化的</li>
<li>可以直接操作多个数据类型</li>
<li>最终会通过toString方法变成字符串<h2 id="功能：CURD"><a href="#功能：CURD" class="headerlink" title="功能：CURD"></a>功能：CURD</h2></li>
<li>C：create  存储<ul>
<li>StringBuffer append()：将指定数据作为参数添加到已有数据结尾处</li>
<li>StringBuffer insert(index,数据)：可以将数据插入到指定index（位置）</li>
</ul>
</li>
<li>U：update 修改<ul>
<li>StringBuffer replace(start,end,String str)</li>
<li>void setCharAt(int index,char ch)</li>
</ul>
</li>
<li>R：read   获取<ul>
<li>char charAt(int index)</li>
<li>int indexOf(String str)</li>
<li>int lastIndexOf(String str)</li>
<li>int length()</li>
<li>String substring(int start,int end)</li>
</ul>
</li>
<li>D：delete 删除 <ul>
<li>StringBuffer delete(start,end)：删除缓冲区中的数据，包含start,不包含end</li>
<li>StringBuffer deleteCharAt(index)：删除指定位置的字符</li>
</ul>
</li>
<li>反转<ul>
<li>String reverse();</li>
</ul>
</li>
<li>将缓冲区中的指定数据存储到指定字符数组中<ul>
<li>void getChars(int sreBegin,int srcEnd,char[] dst,int dstBegin)</li>
</ul>
</li>
</ul>
<h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><ul>
<li>JDK1.5 版本之后出现了StringBuilder<ul>
<li>StringBuffer是线程同步</li>
<li>StringBuilder是线程不同步<blockquote>
<p>以后开发建议使用StringBuilder</p>
</blockquote>
</li>
</ul>
</li>
<li>升级版本的三个因素<ul>
<li>提高效率</li>
<li>简化书写</li>
<li>提高安全性</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String类-概述]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-30-String%E7%B1%BB-%E6%A6%82%E8%BF%B0.html</url>
      <content type="html"><![CDATA[<h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><ul>
<li><p>String 类代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。</p>
</li>
<li><p>字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。例如：</p>
</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure>
<p>等效于：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br></pre></td></tr></table></figure></p>
<p>下面给出了一些如何使用字符串的更多示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"abc"</span>);</span><br><span class="line">String cde = <span class="string">"cde"</span>;</span><br><span class="line">System.out.println(<span class="string">"abc"</span> + cde);</span><br><span class="line">String c = <span class="string">"abc"</span>.substring(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">String d = cde.substring(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>String 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。大小写映射基于 Character 类指定的 Unicode 标准版。</li>
<li>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。字符串串联是通过 StringBuilder（或 StringBuffer）类及其 append 方法实现的。字符串转换是通过 toString 方法实现的，该方法由 Object 类定义，并可被 Java 中的所有类继承。有关字符串串联和转换的更多信息，请参阅 Gosling、Joy 和 Steele 合著的 The Java Language Specification。<br>除非另行说明，否则将 null 参数传递给此类中的构造方法或方法将抛出 NullPointerException。</li>
<li>String 表示一个 UTF-16 格式的字符串，其中的增补字符 由代理项对 表示（有关详细信息，请参阅 Character 类中的 Unicode 字符表示形式）。索引值是指 char 代码单元，因此增补字符在 String 中占用两个位置。</li>
<li>String 类提供处理 Unicode 代码点（即字符）和 Unicode 代码单元（即 char 值）的方法。</li>
<li>特点：字符串一旦被初始化，就无法再改变。</li>
<li>String类中重写了Object类的equals方法，该方法在String类中是用于判断两个字符串的内容是否相同</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comstring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s1 = <span class="string">"abc"</span>;<span class="comment">//  s1是一个类类型变量名，abc代表一个对象</span></span><br><span class="line">		<span class="comment">//字符串最大的特点：一旦被初始化就无法改变。</span></span><br><span class="line">		String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);<span class="comment">//  s2在内存中有两个对象，一个是abc，一个是new对象</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(s1==s2);</span><br><span class="line">		<span class="comment">// s1==s2  比较的是两个对象在内存中的地址值（哈希值）</span></span><br><span class="line">		System.out.println(s1.equals(s2));</span><br><span class="line">		<span class="comment">//s1.equals(s2)  String类中重写了equals方法，该方法用于判定字符串内容是否相同</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>String类适用于描述字符串事物，并且提供了多个方法对字符串进行操作</p>
<h3 id="String类的常见操作"><a href="#String类的常见操作" class="headerlink" title="String类的常见操作"></a>String类的常见操作</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul>
<li>字符串中的包含的字符数，也就是字符串的长度。 获取长度 <code>int length();</code></li>
<li>根据位置获取位置上的某个字符。  <code>char charAt(int index);</code></li>
<li>根据字符获取该字符在字符串中的位置<ul>
<li><code>int indexOf(int ch)</code>：返回的是ch在字符串中第一次出现的位置</li>
<li><code>int indexOf(int ch, int fromIndex)</code>：从fromIndex指定位置开始，获取ch在字符串中出现的位置</li>
<li><code>int indexOf(String str)</code>：返回的是str在字符串中第一次出现的位置</li>
<li><code>int indexOf(String str, int fromIndex)</code>：从fromIndex指定位置开始，获取str在字符串中出现的位置</li>
<li><code>int lastIndexOf(int ch)</code>：返回的是ch从右至左在字符串中第一次出现的位置，其他几个方法同理<h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4></li>
</ul>
</li>
<li>字符串中是否包含某一个子串： <code>boolean contains(str);</code><ul>
<li>特殊之处：indexOf(str); 可以索引str第一次出现的位置，如果返回-1，表示该str不在字符串中存在；</li>
<li>所以，它也可以用于对指定判断是否包含    <code>if(str.indexOf(&quot;aa&quot;)!=-1)</code></li>
<li>该方法可以既可以判断是否包含，也可以获取str出现的位置</li>
</ul>
</li>
<li>字符串中是否有内容： <code>boolean isEmpty();</code>  原理就是判断长度是否为0</li>
<li>字符串是否是以指定内容开头： <code>boolean startsWith(str);</code></li>
<li>字符串是否是以指定内容结尾： <code>boolean endsWith(str);</code></li>
<li>判断字符串内容是否相同，复写了Object类中的equals方法： <code>boolean equals(str);</code></li>
<li>判断内容是否相同，并忽略大小写： <code>boolean equalsIgnoreCase();</code><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4></li>
<li>将字符数组转成字符串<ul>
<li>构造函数：<code>String(char[]);</code>    <code>String(char[],offset,count);</code></li>
<li>静态方法：<code>static String copyValueOf(char[])</code>      <code>static String copyValueOf(char[],offset,count)</code>    <code>static String valueOf(char[])</code></li>
</ul>
</li>
<li>将字符串转成字符数组：<code>char[] toCharArray()</code></li>
<li>将字节数组转成字符串：<code>String(byte[]);</code>  <code>String(byte[],offset,count);</code></li>
<li>将字符串转成字节数组：<code>byte[] getBytes();</code></li>
<li>将基本数据类型转成字符串：<code>String valueOf(int)</code>   <code>static String valueOf(double)</code><br>特殊：字符串和字节数组在转换过程中，是可以指定编码表的。<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4></li>
<li><code>String replace(oldchar,newchar);</code><h4 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h4></li>
<li><code>String[] split(regex);</code><h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4></li>
<li>获取字符串中的一部分：<ul>
<li><code>String substring(begin);</code>  从指定位置开始到结尾，如果角标不存在，会出现字符串角标越界异常</li>
<li><code>String substring(begin,end);</code> 从指定位置开始，不包含结尾位置的字符<h4 id="转换、去除空格、比较"><a href="#转换、去除空格、比较" class="headerlink" title="转换、去除空格、比较"></a>转换、去除空格、比较</h4></li>
</ul>
</li>
<li>转换：将字符串转成大写或小写  <code>String toUpperCase();</code>  <code>String toLowerCase();</code></li>
<li>去除空格：将字符串两端的多个空格去除  <code>String trim();</code></li>
<li>比较：对两个字符串进行自然顺序的比较  <code>int compareTo(String);</code></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[懒汉式单例设计模式-多线程同步操作方法]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"><span class="comment">//懒汉式单例设计模式：具备延迟加载的功能；在多线程中需要进行同步操作，锁的对象是该类的字节码文件对象</span></span><br><span class="line"><span class="comment">//为了避免懒汉式的低效特点，需要进行两次判定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SingleDemo s = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SingleDemo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(SingleDemo.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(s == <span class="keyword">null</span>)</span><br><span class="line">			s = <span class="keyword">new</span> SingleDemo();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程练习-生产者消费者代码优化]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%83%E4%B9%A0-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>JDK1.5版本中提供了对多线程功能的升级解决方案</p>
<ul>
<li>将<code>同步synchronized</code>替换成显示<code>lock</code>的操作</li>
<li>将<code>Object</code>中的<code>wait</code>,<code>notify</code>,<code>notifyAll</code>方法替换成了<code>condition</code>对象</li>
<li>该对象可以对<code>lock</code>进行获取</li>
</ul>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comthread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recouse</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">	<span class="keyword">private</span> Condition condition_pro = lock.newCondition();</span><br><span class="line">	<span class="keyword">private</span> Condition condition_con = lock.newCondition();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span><span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(flag)</span><br><span class="line">			condition_pro.await();</span><br><span class="line">		<span class="keyword">this</span>.name = name + <span class="string">"--"</span> + count++;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"..生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">true</span>;</span><br><span class="line">		condition_con.signal();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span><span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">		lock.lock();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(!flag)</span><br><span class="line">			condition_con.await();</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"....消费者...."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">false</span>;</span><br><span class="line">		condition_pro.signal();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			lock.unlock();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Recouse rec;</span><br><span class="line">	Producer(Recouse rec)&#123;</span><br><span class="line">		<span class="keyword">this</span>.rec = rec;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				rec.set(<span class="string">"++商品++"</span>);</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Recouse rec;</span><br><span class="line">	Consumer(Recouse rec)&#123;</span><br><span class="line">		<span class="keyword">this</span>.rec = rec;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				rec.out();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	Recouse rec = <span class="keyword">new</span> Recouse();</span><br><span class="line">	Producer pro = <span class="keyword">new</span> Producer(rec);</span><br><span class="line">	Consumer con = <span class="keyword">new</span> Consumer(rec);</span><br><span class="line">	Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">	Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">	Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">	Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">	t1.start();</span><br><span class="line">	t2.start();</span><br><span class="line">	t3.start();</span><br><span class="line">	t4.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">Thread-<span class="number">0</span>..生产者..++商品++--<span class="number">1</span></span><br><span class="line">Thread-<span class="number">2</span>....消费者....++商品++--<span class="number">1</span></span><br><span class="line">Thread-<span class="number">1</span>..生产者..++商品++--<span class="number">2</span></span><br><span class="line">Thread-<span class="number">3</span>....消费者....++商品++--<span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span>..生产者..++商品++--<span class="number">3</span></span><br><span class="line">Thread-<span class="number">2</span>....消费者....++商品++--<span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Thread-<span class="number">1</span>..生产者..++商品++--<span class="number">31461</span></span><br><span class="line">Thread-<span class="number">3</span>....消费者....++商品++--<span class="number">31461</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-停止线程]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%81%9C%E6%AD%A2%E7%BA%BF%E7%A8%8B.html</url>
      <content type="html"><![CDATA[<h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><ul>
<li>Java中的stop方法已经过时</li>
<li>如何停止线程？</li>
</ul>
<a id="more"></a>
<ul>
<li>开启多线程运行时，运行代码通常是循环结构，只要控制住循环，就可以让run方法结束，也就是线程结束</li>
<li>特殊情况：当线程处于冻结状态时，就不会读取到循环标记，那么线程就不会结束</li>
<li>当没有指定的方式让冻结状态恢复到运行状态时，这时需要对冻结状态进行清除，强制让线程恢复到运行状态，这样就可以操作循环标记让线程结束</li>
<li>Thread类中提供了interrupt方法解决了这一问题</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comthread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(flag)</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">"....Exception"</span>);</span><br><span class="line">				flag = <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">".....run"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">		flag = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThreadDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		StopThread st = <span class="keyword">new</span> StopThread();</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(st);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(st);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(st);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(num++ == <span class="number">60</span>)&#123;</span><br><span class="line">					t1.interrupt();</span><br><span class="line">					t2.interrupt();</span><br><span class="line">					t3.interrupt();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">"...."</span>+num);</span><br><span class="line">		&#125;</span><br><span class="line">			System.out.println(<span class="string">"over"</span>);</span><br><span class="line">	&#125;				</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">main....1</span><br><span class="line">main....2</span><br><span class="line">main....3</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">main....59</span><br><span class="line">main....60</span><br><span class="line">over</span><br><span class="line">Thread-1....Exception</span><br><span class="line">Thread-1.....run</span><br><span class="line">Thread-0.....run</span><br><span class="line">Thread-2.....run</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-多线程通信]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1.html</url>
      <content type="html"><![CDATA[<h2 id="多线程通信"><a href="#多线程通信" class="headerlink" title="多线程通信"></a>多线程通信</h2><ul>
<li><code>wait(); notify(); notifyAll();</code>都使用在同步中，因为要对<code>持有监视器（锁）</code>的线程操作</li>
<li>为什么这些操作线程的方法要定义在<code>object类</code>中？</li>
</ul>
<a id="more"></a>
<ul>
<li>因为这些方法在操作同步中的线程时，都必须要标识它们<code>所操作线程中的锁</code>，只有<code>同一个锁上</code>的被等待线程，可以被<code>同一个锁上</code>的notify唤醒，不可以对不同锁中的线程进行唤醒</li>
<li>也就是说，<code>等待和唤醒必须是同一个锁</code></li>
<li><code>锁可以是任意对象</code>，所以：可以被任意对象调用的方法定义在object类中<h3 id="多线程通信示例"><a href="#多线程通信示例" class="headerlink" title="多线程通信示例"></a>多线程通信示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Res</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	String sex;</span><br><span class="line">	<span class="keyword">boolean</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	Res r = <span class="keyword">new</span> Res();</span><br><span class="line">	Input(Res r)&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(r)&#123;</span><br><span class="line">			<span class="keyword">if</span>(r.flag)</span><br><span class="line">			<span class="keyword">try</span>&#123;r.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">			<span class="keyword">if</span>(x == <span class="number">1</span>)&#123;</span><br><span class="line">				r.name = <span class="string">"mike"</span>;</span><br><span class="line">				r.sex = <span class="string">"man"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				r.name = <span class="string">"莉莉"</span>;</span><br><span class="line">				r.sex = <span class="string">"女"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			x = (x+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">			r.flag = <span class="keyword">true</span>;</span><br><span class="line">			r.notify();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	Res r = <span class="keyword">new</span> Res();</span><br><span class="line">	Output(Res r)&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;	</span><br><span class="line">			<span class="keyword">synchronized</span>(r)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!flag)</span><br><span class="line">			<span class="keyword">try</span>&#123;r.wait();&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">			System.out.println(r.name+<span class="string">";"</span>+r.sex);</span><br><span class="line">			r.flag = <span class="keyword">false</span>;</span><br><span class="line">			r.notify();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputOutputDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Res r = <span class="keyword">new</span> Res();</span><br><span class="line">		Input in = <span class="keyword">new</span> Input(r);</span><br><span class="line">		Output out = <span class="keyword">new</span> Output(r);</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(in);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(out);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输出结果（交替循环输出，需手动停止）：</span><br><span class="line">莉莉；女</span><br><span class="line">莉莉；女</span><br><span class="line">mike；man</span><br><span class="line">mike；man</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-停止线程]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recouse</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(flag)</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				wait();</span><br><span class="line">				&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">this</span>.name = name + count++;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"生产者.."</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">true</span>;</span><br><span class="line">		notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(!flag)</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"消费者......"</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		flag = <span class="keyword">false</span>;</span><br><span class="line">		notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	Recouse rus = <span class="keyword">new</span> Recouse();</span><br><span class="line">	Producer(Recouse rus)&#123;</span><br><span class="line">		<span class="keyword">this</span>.rus = rus;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">		rus.set(<span class="string">"+商品+"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	Recouse rus = <span class="keyword">new</span> Recouse();</span><br><span class="line">	Consumer(Recouse rus)&#123;</span><br><span class="line">		<span class="keyword">this</span>.rus = rus;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">		rus.out();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Recouse rus = <span class="keyword">new</span> Recouse();</span><br><span class="line">		Producer pro = <span class="keyword">new</span> Producer(rus);</span><br><span class="line">		Consumer con = <span class="keyword">new</span> Consumer(rus);</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(pro);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">		Thread t4 = <span class="keyword">new</span> Thread(con);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">		t4.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输出结果（有序依次输出）：</span><br><span class="line">Thread-1生产者..+商品+1</span><br><span class="line">Thread-3消费者......+商品+1</span><br><span class="line">Thread-0生产者..+商品+2</span><br><span class="line">Thread-2消费者......+商品+2</span><br><span class="line">Thread-0生产者..+商品+3</span><br><span class="line">Thread-3消费者......+商品+3</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-匿名内部类写多线程示例]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%86%99%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A4%BA%E4%BE%8B.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>通过匿名内部类的方式在主函数中写多线程的代码</p>
</blockquote>
<ul>
<li>创建一个以Thread子类为对象的匿名内部类，并复写run方法调用start方法开启线程</li>
<li>定义一个方法作为主线程方法执行</li>
<li>创建一个以Runnable接口为对象的匿名内部类，并实现run方法；再通过创建Thread对象调用start方法开启线程</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread()&#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;<span class="number">100</span> ; x++)&#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+x);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt;<span class="number">60</span>;x++)&#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">"...."</span>+x);</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		Runnable r = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x&lt;<span class="number">80</span> ; x++)&#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+x);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">		t.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">main....0</span><br><span class="line">main....1</span><br><span class="line">main....2</span><br><span class="line">main....3</span><br><span class="line">main....4</span><br><span class="line">main....5</span><br><span class="line">main....6</span><br><span class="line">Thread-0---0</span><br><span class="line">Thread-0---1</span><br><span class="line">Thread-0---2</span><br><span class="line">Thread-0---3</span><br><span class="line">Thread-0---4</span><br><span class="line">Thread-0---5</span><br><span class="line">Thread-0---6</span><br><span class="line">Thread-0---7</span><br><span class="line">Thread-0---8</span><br><span class="line">Thread-0---9</span><br><span class="line">Thread-0---10</span><br><span class="line">Thread-0---11</span><br><span class="line">Thread-0---12</span><br><span class="line">Thread-0---13</span><br><span class="line">Thread-0---14</span><br><span class="line">Thread-0---15</span><br><span class="line">Thread-0---16</span><br><span class="line">Thread-0---17</span><br><span class="line">Thread-0---18</span><br><span class="line">Thread-0---19</span><br><span class="line">Thread-0---20</span><br><span class="line">Thread-0---21</span><br><span class="line">Thread-0---22</span><br><span class="line">Thread-0---23</span><br><span class="line">Thread-0---24</span><br><span class="line">Thread-0---25</span><br><span class="line">Thread-0---26</span><br><span class="line">Thread-0---27</span><br><span class="line">Thread-0---28</span><br><span class="line">Thread-0---29</span><br><span class="line">Thread-0---30</span><br><span class="line">Thread-0---31</span><br><span class="line">Thread-0---32</span><br><span class="line">Thread-0---33</span><br><span class="line">Thread-0---34</span><br><span class="line">Thread-0---35</span><br><span class="line">Thread-0---36</span><br><span class="line">Thread-0---37</span><br><span class="line">Thread-0---38</span><br><span class="line">Thread-0---39</span><br><span class="line">Thread-0---40</span><br><span class="line">Thread-0---41</span><br><span class="line">Thread-0---42</span><br><span class="line">Thread-0---43</span><br><span class="line">Thread-0---44</span><br><span class="line">Thread-0---45</span><br><span class="line">Thread-0---46</span><br><span class="line">Thread-0---47</span><br><span class="line">Thread-0---48</span><br><span class="line">Thread-0---49</span><br><span class="line">Thread-0---50</span><br><span class="line">Thread-0---51</span><br><span class="line">Thread-0---52</span><br><span class="line">Thread-0---53</span><br><span class="line">Thread-0---54</span><br><span class="line">Thread-0---55</span><br><span class="line">Thread-0---56</span><br><span class="line">Thread-0---57</span><br><span class="line">Thread-0---58</span><br><span class="line">Thread-0---59</span><br><span class="line">Thread-0---60</span><br><span class="line">Thread-0---61</span><br><span class="line">Thread-0---62</span><br><span class="line">Thread-0---63</span><br><span class="line">Thread-0---64</span><br><span class="line">Thread-0---65</span><br><span class="line">Thread-0---66</span><br><span class="line">Thread-0---67</span><br><span class="line">Thread-0---68</span><br><span class="line">Thread-0---69</span><br><span class="line">Thread-0---70</span><br><span class="line">Thread-0---71</span><br><span class="line">Thread-0---72</span><br><span class="line">Thread-0---73</span><br><span class="line">Thread-0---74</span><br><span class="line">Thread-0---75</span><br><span class="line">Thread-0---76</span><br><span class="line">Thread-0---77</span><br><span class="line">Thread-0---78</span><br><span class="line">Thread-0---79</span><br><span class="line">Thread-0---80</span><br><span class="line">Thread-0---81</span><br><span class="line">Thread-0---82</span><br><span class="line">Thread-0---83</span><br><span class="line">Thread-0---84</span><br><span class="line">Thread-0---85</span><br><span class="line">Thread-0---86</span><br><span class="line">Thread-0---87</span><br><span class="line">Thread-0---88</span><br><span class="line">Thread-0---89</span><br><span class="line">Thread-0---90</span><br><span class="line">Thread-0---91</span><br><span class="line">Thread-0---92</span><br><span class="line">Thread-0---93</span><br><span class="line">Thread-0---94</span><br><span class="line">Thread-0---95</span><br><span class="line">Thread-0---96</span><br><span class="line">Thread-0---97</span><br><span class="line">Thread-0---98</span><br><span class="line">Thread-0---99</span><br><span class="line">main....7</span><br><span class="line">main....8</span><br><span class="line">main....9</span><br><span class="line">main....10</span><br><span class="line">main....11</span><br><span class="line">main....12</span><br><span class="line">main....13</span><br><span class="line">main....14</span><br><span class="line">main....15</span><br><span class="line">main....16</span><br><span class="line">main....17</span><br><span class="line">main....18</span><br><span class="line">main....19</span><br><span class="line">main....20</span><br><span class="line">main....21</span><br><span class="line">main....22</span><br><span class="line">main....23</span><br><span class="line">main....24</span><br><span class="line">main....25</span><br><span class="line">main....26</span><br><span class="line">main....27</span><br><span class="line">main....28</span><br><span class="line">main....29</span><br><span class="line">main....30</span><br><span class="line">main....31</span><br><span class="line">main....32</span><br><span class="line">main....33</span><br><span class="line">main....34</span><br><span class="line">main....35</span><br><span class="line">main....36</span><br><span class="line">main....37</span><br><span class="line">main....38</span><br><span class="line">main....39</span><br><span class="line">main....40</span><br><span class="line">main....41</span><br><span class="line">main....42</span><br><span class="line">main....43</span><br><span class="line">main....44</span><br><span class="line">main....45</span><br><span class="line">main....46</span><br><span class="line">main....47</span><br><span class="line">main....48</span><br><span class="line">main....49</span><br><span class="line">main....50</span><br><span class="line">main....51</span><br><span class="line">main....52</span><br><span class="line">main....53</span><br><span class="line">main....54</span><br><span class="line">main....55</span><br><span class="line">main....56</span><br><span class="line">main....57</span><br><span class="line">main....58</span><br><span class="line">main....59</span><br><span class="line">Thread-1---0</span><br><span class="line">Thread-1---1</span><br><span class="line">Thread-1---2</span><br><span class="line">Thread-1---3</span><br><span class="line">Thread-1---4</span><br><span class="line">Thread-1---5</span><br><span class="line">Thread-1---6</span><br><span class="line">Thread-1---7</span><br><span class="line">Thread-1---8</span><br><span class="line">Thread-1---9</span><br><span class="line">Thread-1---10</span><br><span class="line">Thread-1---11</span><br><span class="line">Thread-1---12</span><br><span class="line">Thread-1---13</span><br><span class="line">Thread-1---14</span><br><span class="line">Thread-1---15</span><br><span class="line">Thread-1---16</span><br><span class="line">Thread-1---17</span><br><span class="line">Thread-1---18</span><br><span class="line">Thread-1---19</span><br><span class="line">Thread-1---20</span><br><span class="line">Thread-1---21</span><br><span class="line">Thread-1---22</span><br><span class="line">Thread-1---23</span><br><span class="line">Thread-1---24</span><br><span class="line">Thread-1---25</span><br><span class="line">Thread-1---26</span><br><span class="line">Thread-1---27</span><br><span class="line">Thread-1---28</span><br><span class="line">Thread-1---29</span><br><span class="line">Thread-1---30</span><br><span class="line">Thread-1---31</span><br><span class="line">Thread-1---32</span><br><span class="line">Thread-1---33</span><br><span class="line">Thread-1---34</span><br><span class="line">Thread-1---35</span><br><span class="line">Thread-1---36</span><br><span class="line">Thread-1---37</span><br><span class="line">Thread-1---38</span><br><span class="line">Thread-1---39</span><br><span class="line">Thread-1---40</span><br><span class="line">Thread-1---41</span><br><span class="line">Thread-1---42</span><br><span class="line">Thread-1---43</span><br><span class="line">Thread-1---44</span><br><span class="line">Thread-1---45</span><br><span class="line">Thread-1---46</span><br><span class="line">Thread-1---47</span><br><span class="line">Thread-1---48</span><br><span class="line">Thread-1---49</span><br><span class="line">Thread-1---50</span><br><span class="line">Thread-1---51</span><br><span class="line">Thread-1---52</span><br><span class="line">Thread-1---53</span><br><span class="line">Thread-1---54</span><br><span class="line">Thread-1---55</span><br><span class="line">Thread-1---56</span><br><span class="line">Thread-1---57</span><br><span class="line">Thread-1---58</span><br><span class="line">Thread-1---59</span><br><span class="line">Thread-1---60</span><br><span class="line">Thread-1---61</span><br><span class="line">Thread-1---62</span><br><span class="line">Thread-1---63</span><br><span class="line">Thread-1---64</span><br><span class="line">Thread-1---65</span><br><span class="line">Thread-1---66</span><br><span class="line">Thread-1---67</span><br><span class="line">Thread-1---68</span><br><span class="line">Thread-1---69</span><br><span class="line">Thread-1---70</span><br><span class="line">Thread-1---71</span><br><span class="line">Thread-1---72</span><br><span class="line">Thread-1---73</span><br><span class="line">Thread-1---74</span><br><span class="line">Thread-1---75</span><br><span class="line">Thread-1---76</span><br><span class="line">Thread-1---77</span><br><span class="line">Thread-1---78</span><br><span class="line">Thread-1---79</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-相关API文档]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-29-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%9B%B8%E5%85%B3%E9%83%A8%E5%88%86API%E6%96%87%E6%A1%A3.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>public class Thread<br>extends Object<br>implements Runnable</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p><code>线程</code>是程序中的执行线程。Java虚拟机允许应用程序并发地运行多个执行线程。</p>
</li>
<li><p>每个线程都有一个优先级，高优先级线程的执行优先于低优先级线程。每个线程都可以或不可以标记为一个守护程序。当某个线程中运行的代码创建一个新 Thread 对象时，该新线程的初始优先级被设定为创建线程的优先级，并且当且仅当创建线程是守护线程时，新线程才是守护程序。</p>
</li>
<li><p>当 Java 虚拟机启动时，通常都会有单个非守护线程（它通常会调用某个指定类的 main 方法）。Java 虚拟机会继续执行线程，直到下列任一情况出现时为止：</p>
<ul>
<li>调用了 Runtime 类的 exit 方法，并且安全管理器允许退出操作发生。</li>
<li>非守护线程的所有线程都已停止运行，无论是通过从对 run 方法的调用中返回，还是通过抛出一个传播到 run 方法之外的异常。</li>
</ul>
</li>
<li>创建新执行线程有两种方法。一种方法是将类声明为 Thread 的子类。该子类应重写 Thread 类的 run 方法。接下来可以分配并启动该子类的实例。例如，计算大于某一规定值的质数的线程可以写成：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">     <span class="keyword">long</span> minPrime;</span><br><span class="line">     PrimeThread(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">         <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">          . . .</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><p>public Thread(String name)<br>分配新的 Thread 对象。这种构造方法与 Thread(null, null, name) 具有相同的作用。<br>参数：</p>
<h2 id="name-新线程的名称。"><a href="#name-新线程的名称。" class="headerlink" title="name - 新线程的名称。"></a>name - 新线程的名称。</h2><h3 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread"></a>currentThread</h3><p>public static Thread currentThread()<br>返回对当前正在执行的线程对象的引用。<br>返回：</p>
<h2 id="当前执行的线程。"><a href="#当前执行的线程。" class="headerlink" title="当前执行的线程。"></a>当前执行的线程。</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>public static void sleep(long millis)<br>                  throws InterruptedException<br>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。该线程不丢失任何监视器的所属权。<br>参数：<br>millis - 以毫秒为单位的休眠时间。<br>抛出：</p>
<h2 id="InterruptedException-如果任何线程中断了当前线程。当抛出该异常时，当前线程的中断状态-被清除。"><a href="#InterruptedException-如果任何线程中断了当前线程。当抛出该异常时，当前线程的中断状态-被清除。" class="headerlink" title="InterruptedException - 如果任何线程中断了当前线程。当抛出该异常时，当前线程的中断状态 被清除。"></a>InterruptedException - 如果任何线程中断了当前线程。当抛出该异常时，当前线程的中断状态 被清除。</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>public void start()<br>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。<br>结果是两个线程并发地运行；当前线程（从调用返回给 start 方法）和另一个线程（执行其 run 方法）。</p>
<p>多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。</p>
<p>抛出：</p>
<h2 id="IllegalThreadStateException-如果线程已经启动。"><a href="#IllegalThreadStateException-如果线程已经启动。" class="headerlink" title="IllegalThreadStateException - 如果线程已经启动。"></a>IllegalThreadStateException - 如果线程已经启动。</h2><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>public void run()<br>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。<br>Thread 的子类应该重写该方法。</p>
<p>指定者：</p>
<h2 id="接口-Runnable-中的-run"><a href="#接口-Runnable-中的-run" class="headerlink" title="接口 Runnable 中的 run"></a>接口 Runnable 中的 run</h2><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><p>public void interrupt()<br>中断线程。<br>如果当前线程没有中断它自己（这在任何情况下都是允许的），则该线程的 checkAccess 方法就会被调用，这可能抛出 SecurityException。</p>
<p>如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，则其中断状态将被清除，它还将收到一个 InterruptedException。</p>
<p>如果该线程在可中断的通道上的 I/O 操作中受阻，则该通道将被关闭，该线程的中断状态将被设置并且该线程将收到一个 ClosedByInterruptException。</p>
<p>如果该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。</p>
<p>如果以前的条件都没有保存，则该线程的中断状态将被设置。</p>
<p>中断一个不处于活动状态的线程不需要任何作用。</p>
<p>抛出：</p>
<h2 id="SecurityException-如果当前线程无法修改该线程"><a href="#SecurityException-如果当前线程无法修改该线程" class="headerlink" title="SecurityException - 如果当前线程无法修改该线程"></a>SecurityException - 如果当前线程无法修改该线程</h2><h3 id="setName"><a href="#setName" class="headerlink" title="setName"></a>setName</h3><p>public final void setName(String name)<br>改变线程名称，使之与参数 name 相同。<br>首先调用线程的 checkAccess 方法，且不带任何参数。这可能抛出 SecurityException。</p>
<p>参数：<br>name - 该线程的新名称。<br>抛出：</p>
<h2 id="SecurityException-如果当前线程不能修改该线程。"><a href="#SecurityException-如果当前线程不能修改该线程。" class="headerlink" title="SecurityException - 如果当前线程不能修改该线程。"></a>SecurityException - 如果当前线程不能修改该线程。</h2><h3 id="getName"><a href="#getName" class="headerlink" title="getName"></a>getName</h3><p>public final String getName()<br>返回该线程的名称。<br>返回：</p>
<h2 id="该线程的名称。"><a href="#该线程的名称。" class="headerlink" title="该线程的名称。"></a>该线程的名称。</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-死锁deadlock]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-28-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%AD%BB%E9%94%81deadlock.html</url>
      <content type="html"><![CDATA[<h2 id="死锁示例"><a href="#死锁示例" class="headerlink" title="死锁示例"></a>死锁示例</h2><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">	Test(<span class="keyword">boolean</span> flag)&#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = flag;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(TestDemo.locka)&#123;</span><br><span class="line">				<span class="keyword">synchronized</span>(TestDemo.lockb)&#123;</span><br><span class="line">			System.out.println(<span class="string">"if deadlocka"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(TestDemo.lockb)&#123;</span><br><span class="line">				<span class="keyword">synchronized</span>(TestDemo.locka)&#123;</span><br><span class="line">			System.out.println(<span class="string">"else deadlockb"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Object locka = <span class="keyword">new</span> Object();</span><br><span class="line">	<span class="keyword">static</span> Object lockb = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test(<span class="keyword">true</span>));</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Test(<span class="keyword">false</span>));</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果（每次输出次数不一样，会进入死锁状态，程序挂起）：</span><br><span class="line">if deadlocka</span><br><span class="line">else deadlockb</span><br><span class="line">else deadlockb</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多线程-Tread和synchronized]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-27-%E5%A4%9A%E7%BA%BF%E7%A8%8B-Thread%E5%92%8Csynchronized.html</url>
      <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ul>
<li>是一个正在执行的程序</li>
<li>每一个进程执行都有一个执行顺序，该顺序是一个执行路径，或者叫一个控制单元</li>
</ul>
<a id="more"></a>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul>
<li>就是进程中的一个控制单元</li>
<li>线程在控制着进程的执行<blockquote>
<p>一个进程中至少有一个线程</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>Java VM启动的时候会有一个进程java.exe</li>
<li>该进程中至少有一个线程负责java程序的执行</li>
<li>而且这个线程运行的代码存在于main方法中</li>
<li>该线程称之为主线程<blockquote>
<p>扩展：其实更细节说明jvm，jvm启动时不止一个线程，还有一个负责垃圾回收机制的线程</p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="如何在自定义的代码中，定义一个线程？"><a href="#如何在自定义的代码中，定义一个线程？" class="headerlink" title="如何在自定义的代码中，定义一个线程？"></a>如何在自定义的代码中，定义一个线程？</h2><ul>
<li>通过对JDK API文档的查找，java已经提供了对线程这一事物的描述，就是Thread类</li>
<li>创建线程的第一种方法：继承Thread类<ul>
<li>定义一个类继承Thread类</li>
<li>复写Thread类中run方法</li>
<li>调用Thread类中的start方法，该方法有两个作用：启动线程，调用run方法</li>
</ul>
</li>
<li><p>在执行多线程的过程中，发现每一次的结果都不相同</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x&lt;<span class="number">60</span>;x++)</span><br><span class="line">		System.out.println(<span class="string">"demo---&gt;"</span>+x);</span><br><span class="line">	&#125;<span class="comment">//重写Thread类中run方法</span></span><br><span class="line">&#125;<span class="comment">//创建一个类继承Thread类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Demo d = <span class="keyword">new</span> Demo();<span class="comment">//创建一个Demo的线程</span></span><br><span class="line">		d.start();<span class="comment">//通过start方法启动该线程并调用run方法</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt; <span class="number">60</span>;x++)</span><br><span class="line">			System.out.println(<span class="string">"thread---&gt;"</span>+x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>因为多个线程都在获取cpu的执行权，cpu执行到谁，谁就运行</li>
<li>在某一个时刻，只能有一个程序在运行（多核cpu除外）</li>
<li>cpu在执行多线程时进行着快速地切换，以达到看上去是同时进行的效果</li>
<li>我们可以形象地把多线程的运行表达为在互相抢夺cpu的执行权</li>
<li>这也是多线程的一个特性：随机性</li>
</ul>
</li>
<li>创建线程的第二种方法：实现Runnable接口<ul>
<li>定义类实现Runnable接口</li>
<li>覆盖Runnable接口中的run方法</li>
<li>通过Thread类建立线程对象</li>
<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数</li>
<li>调用Thread类的start方法开启线程并调用Runnable接口子类的run方法<h3 id="Thread-sleep实例（售票）"><a href="#Thread-sleep实例（售票）" class="headerlink" title="Thread.sleep实例（售票）"></a>Thread.sleep实例（售票）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> comtest;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">				show();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(tick&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"  sale: "</span>+tick--);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//运用synchronized同步代码块方式：</span></span><br><span class="line">	<span class="comment">/*Object obj = new Object();</span><br><span class="line">	public void run()&#123;</span><br><span class="line">		while(true)&#123;</span><br><span class="line">			synchronized(obj)&#123;</span><br><span class="line">				if(tick&gt;0)&#123;</span><br><span class="line">				try&#123;</span><br><span class="line">					Thread.sleep(10);</span><br><span class="line">					&#125; catch(Exception e)&#123;&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+"  sale:"+tick--);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;//该代码会一直执行，不会停止，要谨慎运行！！！！</span><br><span class="line">	&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">		Thread t4 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">		t4.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输出结果（多线程抢夺线程执行权随机执行）：</span><br><span class="line">Thread-0:sales..100</span><br><span class="line">Thread-0:sales..99</span><br><span class="line">Thread-1:sales..98</span><br><span class="line">Thread-0:sales..97</span><br><span class="line">Thread-2:sales..96</span><br><span class="line">Thread-2:sales..95</span><br><span class="line">Thread-2:sales..94</span><br><span class="line">Thread-0:sales..93</span><br><span class="line">Thread-0:sales..92</span><br><span class="line">Thread-0:sales..91</span><br><span class="line">Thread-3:sales..90</span><br><span class="line">Thread-3:sales..89</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Thread-0:sales..3</span><br><span class="line">Thread-2:sales..2</span><br><span class="line">Thread-0:sales..1</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>实现方式和继承方式的区别<ul>
<li>实现方式避免了单继承的局限性，在定义线程时建议使用实现方式  </li>
<li>继承方式的线程代码存放在Thread类的子类run方法中；实现方式的线程代码存放在Runnable接口子类的run方法中</li>
</ul>
</li>
</ul>
<hr>
<h3 id="同步synchronized实例（存款）"><a href="#同步synchronized实例（存款）" class="headerlink" title="同步synchronized实例（存款）"></a>同步synchronized实例（存款）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package comtest;</span><br><span class="line"></span><br><span class="line">class Bank &#123;</span><br><span class="line">	private int sum;//定义一个变量为总存款数</span><br><span class="line">	public synchronized void add(int money)&#123;</span><br><span class="line">		sum = sum + money;</span><br><span class="line">		try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125;//Thread.sleep(10); -- 让当前运行的线程冻结10毫秒</span><br><span class="line">		System.out.println(&quot;sum = &quot;+ sum);</span><br><span class="line">	&#125;//使用synchronized同步add方法，并定义变量存款金额</span><br><span class="line">&#125;</span><br><span class="line">class Cus implements Runnable&#123;</span><br><span class="line">	Bank b = new Bank();//创建Bank对象，以便调用其add方法进行多次存款动作</span><br><span class="line">	public void run()&#123;</span><br><span class="line">		for (int x = 0;x &lt; 3 ;x++)&#123;</span><br><span class="line">		b.add(100);</span><br><span class="line">		&#125;//实现Runnable接口中的run方法：通过for循环的方式表现存款三次，每次存入100元</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class RunnableTest2 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">		Cus c = new Cus();//创建一个储户的线程对象</span><br><span class="line">		Thread t1 = new Thread(c);//创建一个Thread线程对象调用储户对象的方法</span><br><span class="line">		Thread t2 = new Thread(c);</span><br><span class="line">		t1.start();//开启线程，并调用cus中的run方法进行存款动作</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">sum = 100</span><br><span class="line">sum = 200</span><br><span class="line">sum = 300</span><br><span class="line">sum = 400</span><br><span class="line">sum = 500</span><br><span class="line">sum = 600</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象-异常（总结）]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-27-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%BC%82%E5%B8%B8%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89.html</url>
      <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>对问题的描述，将问题进行对象的封装</li>
</ul>
<a id="more"></a>
<h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><pre><code>Throwable
    |--Exception
        |--RuntimeException
        |--...
        |--XxxxException
    |--Error
</code></pre><h3 id="异常体系的特点"><a href="#异常体系的特点" class="headerlink" title="异常体系的特点"></a>异常体系的特点</h3><ul>
<li>异常体系中的所有类与对象都具有<code>可抛性</code></li>
<li>也就是说都可以被<code>throw</code>、<code>throws</code>所操作</li>
<li>JAVA中只有异常体系具备这一特点<h3 id="throw和throws的用法"><a href="#throw和throws的用法" class="headerlink" title="throw和throws的用法"></a>throw和throws的用法</h3></li>
<li>throw定义在<code>函数内</code>，用于抛出异常对象</li>
<li>throws定义在<code>函数上</code>，用于声明异常类，可以同时声明多个异常类，用逗号隔开</li>
<li>当函数中有throw抛出异常对象，并且没有进行<code>try</code> <code>catch</code>处理，必须在函数上通过<code>hrows</code>声明异常，否则编译失败<blockquote>
<p><code>RuntimeException</code>类异常除外，如果函数中抛出此异常，函数上可以不用声明</p>
</blockquote>
</li>
<li>如果函数声明了异常，调用者在调用时可以继续抛出异常，也可以通过<code>try</code> <code>catch</code>处理此异常<h3 id="异常分为两种："><a href="#异常分为两种：" class="headerlink" title="异常分为两种："></a>异常分为两种：</h3></li>
<li>编译时被检测异常<ul>
<li>该异常在编译时如果没有处理，编译失败</li>
<li>该异常被标识，代表着可以被处理</li>
</ul>
</li>
<li>运行时异常（编译时不检测）<ul>
<li>在编译时不需要处理，编译器不检测</li>
<li>该异常的发生，建议不处理，让程序停止并对代码进行修正<h3 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    需要被检测的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(捕获的异常对象)&#123;</span><br><span class="line">    处理异常的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    一定会被执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="异常的三种编写格式"><a href="#异常的三种编写格式" class="headerlink" title="异常的三种编写格式"></a>异常的三种编写格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">第一种：</span><br><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">&#125; catch(  )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">&#125; catch(  )&#123;</span><br><span class="line"></span><br><span class="line">&#125; fianlly&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">&#125; finally&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>finally中通常定义的是关闭资源代码，因为资源必须被释放。</li>
<li>finally语句中的代码只有一种情况下不会被执行，就是当执行到<code>System.exit(0);</code>时<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3></li>
<li>定义类继承Exception或RuntimeException<ul>
<li>为了让该自定义类具备可抛性</li>
<li>让该类具备操作异常的共性方法</li>
</ul>
</li>
<li>当要定义自定义类的异常信息时，可以使用父类已经定义好的功能，让子类异常信息传递给父类的构造函数：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    MyException(String message)&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li>按照JAVA的面向对象的思想，将程序中出现的特有问题进行封装<h3 id="异常的好处"><a href="#异常的好处" class="headerlink" title="异常的好处"></a>异常的好处</h3></li>
<li>将问题进行封装</li>
<li>将正常流程代码和问题处理代码相分离，便于阅读<h3 id="异常的处理原则"><a href="#异常的处理原则" class="headerlink" title="异常的处理原则"></a>异常的处理原则</h3></li>
<li>处理方式：try 和 throws</li>
<li>调用到抛出异常的功能时，抛出几个就要处理几个：一个try对应多个catch</li>
<li>多个catch，父类的catch放到最下面</li>
<li>catch内需要定义针对性的处理方式，不要简单地定义printStackTrace、输出语句，也不要不写</li>
<li><p>当捕获到的异常，本功能处理不了时，可以继续在catch中抛出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AException();</span><br><span class="line">&#125; <span class="keyword">catch</span> (AException e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果该异常处理不了，而且并不属于该功能出现的异常，可以将该异常转换后抛出和该功能相关的异常</p>
</li>
<li>或者该异常可以处理，但需要将该异常产生的和本功能相关的问题提供出去，让调用者知道并处理；也可以将捕获到的异常处理后，转换新的异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AException();</span><br><span class="line">&#125; <span class="keyword">catch</span> (AException e)&#123;</span><br><span class="line">    <span class="comment">//对AException先进行处理</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="异常的注意事项"><a href="#异常的注意事项" class="headerlink" title="异常的注意事项"></a>异常的注意事项</h3><ul>
<li>在子类覆盖时<ul>
<li>子类抛出的异常必须是父类异常的子集或子类</li>
<li>如果父类或者接口没有异常抛出时，子类覆盖异常出现异常，只能try不能抛</li>
</ul>
</li>
</ul>
<hr>
<h3 id="子父类异常示例"><a href="#子父类异常示例" class="headerlink" title="子父类异常示例"></a>子父类异常示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlueScriptException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	BlueScriptException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrokenException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	BrokenException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoPlanException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	NoPlanException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> state = <span class="number">3</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span><span class="keyword">throws</span> BlueScriptException,BrokenException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(state == <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BlueScriptException(<span class="string">"电脑蓝屏了"</span>);</span><br><span class="line">		<span class="keyword">if</span>(state == <span class="number">3</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BrokenException(<span class="string">"电脑坏掉了"</span>);</span><br><span class="line">		System.out.println(<span class="string">"电脑运行"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"电脑重启"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Computer cmt;</span><br><span class="line">	Teacher(String name)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		cmt = <span class="keyword">new</span> Computer();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tech</span><span class="params">()</span><span class="keyword">throws</span> NoPlanException</span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		cmt.run();</span><br><span class="line">		System.out.println(<span class="string">"老师开始上课"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(BlueScriptException e)&#123;</span><br><span class="line">		System.out.println(e.getMessage());</span><br><span class="line">		cmt.reset();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(BrokenException e)&#123;</span><br><span class="line">		System.out.println(e.getMessage());</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NoPlanException(<span class="string">"课时进度无法继续"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"同学们做练习题"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * <span class="doctag">@param</span> args</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		Teacher t = <span class="keyword">new</span> Teacher(<span class="string">"蒋老师"</span>);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			t.tech();		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NoPlanException e)&#123;	</span><br><span class="line">			t.test();</span><br><span class="line">			System.out.println(<span class="string">"test原因："</span>+e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">电脑坏掉了</span><br><span class="line">同学们做练习题</span><br><span class="line">test原因：课时进度无法继续</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="RuntimeException异常示例"><a href="#RuntimeException异常示例" class="headerlink" title="RuntimeException异常示例"></a>RuntimeException异常示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mir</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">mianji</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rec</span> <span class="keyword">implements</span> <span class="title">Mir</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> len,wid;</span><br><span class="line">	Rec(<span class="keyword">double</span> len,<span class="keyword">double</span> wid)&#123;</span><br><span class="line">		<span class="keyword">if</span>(len&lt;=<span class="number">0</span> || wid&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoValueException(<span class="string">"长或宽数据不合法，请重新输入"</span>);</span><br><span class="line">		<span class="keyword">this</span>.len = len;</span><br><span class="line">		<span class="keyword">this</span>.wid = wid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mianji</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"长方形面积 = "</span>+len*wid);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Mir</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> ricl;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">	Circle(<span class="keyword">double</span> ricl)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ricl&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoValueException(<span class="string">"半径不合法，请重新输入"</span>);</span><br><span class="line">		<span class="keyword">this</span>.ricl = ricl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mianji</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"圆形面积 = "</span>+ricl*ricl*PI);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoValueException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">	NoValueException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		Rec r = <span class="keyword">new</span> Rec(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">		r.mianji();</span><br><span class="line">		</span><br><span class="line">		Circle c = <span class="keyword">new</span> Circle(-<span class="number">5</span>);</span><br><span class="line">		c.mianji();</span><br><span class="line">		&#125; <span class="keyword">catch</span>(NoValueException e)&#123;</span><br><span class="line">			System.out.println(e.toString());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">长方形面积 = 20.0</span><br><span class="line">ExceptionTest2.NoValueException: 半径不合法，请重新输入</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象-异常练习]]></title>
      <url>http://blog.zyzhy.com/posts/javabase/2016-06-26-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%BC%82%E5%B8%B8%E7%BB%83%E4%B9%A0.html</url>
      <content type="html"><![CDATA[<ul>
<li>需求：老师用电脑上课</li>
<li>思路：   </li>
</ul>
<ol>
<li>老师是操作者，电脑是执行者，上课是执行内容</li>
<li>老师在使用电脑的过程中可能会出现电脑死机或坏掉的问题</li>
<li>当电脑死机时，可以重启电脑来处理；当电脑坏掉时，会进而影响到老师上课，导致老师无法完成上课的问题</li>
<li>无法上课时，需要先解决上课的问题：让学生先做练习，然后告诉校长课程无法继续，原因是电脑坏掉了</li>
<li>校长处理问题时会通知换一台电脑，然后安排放假</li>
</ol>
<ul>
<li>方法：   </li>
</ul>
<ol>
<li>创建老师、电脑这两个类以便调用对象执行上课内容</li>
<li>创建电脑异常类以供解决电脑问题</li>
<li>创建老师异常类以供解决老师问题</li>
<li>通过抛出异常的方式处理电脑和老师的问题</li>
</ol>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeathException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	DeathException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrokenException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	BrokenException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotechException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	NotechException(String message)&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">3</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span><span class="keyword">throws</span> DeathException,BrokenException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(value == <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> DeathException(<span class="string">"电脑死机，需要重启"</span>);</span><br><span class="line">		<span class="keyword">if</span>(value == <span class="number">3</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BrokenException(<span class="string">"电脑坏掉了，需要检修"</span>);</span><br><span class="line">	System.out.println(<span class="string">"电脑正常运行"</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"电脑正在重启"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Computer cmp;</span><br><span class="line">	Teacher(String name)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		cmp = <span class="keyword">new</span> Computer();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Tech</span><span class="params">()</span><span class="keyword">throws</span> NotechException</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			cmp.run();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DeathException e) &#123;</span><br><span class="line">			cmp.reset();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (BrokenException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NotechException(<span class="string">"课时无法进行，因为："</span>+e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"开始上课"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"做练习题，复习功课"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		Teacher t = <span class="keyword">new</span> Teacher(<span class="string">"张"</span>);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		t.Tech();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NotechException e)&#123;</span><br><span class="line">			System.out.println(e.toString());</span><br><span class="line">			System.out.println(<span class="string">"今天放假"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">做练习题，复习功课</span><br><span class="line">XXX.NotechException: 课时无法进行，因为：电脑坏掉了，需要检修</span><br><span class="line">今天放假</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我不知道你，但我认识你]]></title>
      <url>http://blog.zyzhy.com/posts/dreamlife/2016-06-18-%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%EF%BC%8C%E4%BD%86%E6%88%91%E8%AE%A4%E8%AF%86%E4%BD%A0.html</url>
      <content type="html"><![CDATA[<p>我不知道你的名字<br>但我一直都知道你的样子<br>一张肥嘟嘟的粉嫩小脸<br>总是天真地笑着，又不知所以地哭着<br>一双又黑又亮的大眼睛<br>总是高兴地看着，又懵懂可爱地眨着<br><a id="more"></a></p>
<p>我不知道你是男孩，还是女孩<br>但我一直都知道你很漂亮<br>你没有扰人的苦恼<br>无论是笑着，或是哭着<br>都是灿烂的，阳光的<br>这是你天生的魅力</p>
<p>我还没听过你的声音<br>但我想，那一定是轻灵的、甜甜的<br>你会很喜欢唱歌<br>把你的快乐唱给所有人听<br>或许还会给我们讲一讲你每天的故事</p>
<p>我想看你奔跑时的样子<br>摔倒了，对身边的人笑一笑<br>然后爬起来，拍一拍衣服上的尘土<br>就这样跑着，笑着<br>我会循着你的影子一直跟着，看着</p>
<p>有一天，我会陪着你在清晨跑步<br>带你去认识很多的朋友<br>我们看着花开，听着蝉鸣，闻着稻香，舔着雪花<br>你在长大<br>而我，会陪在你的每一个秋冬春夏</p>
<p>有一天，你会牵着我在傍晚散步<br>带我去看看过去的朋友<br>我们等着花开，守着蝉鸣，尝着稻香，踏着雪花<br>我在老去<br>而你，会牵着我的每一个秋冬春夏  </p>
]]></content>
    </entry>
    
  
  
</search>
